Package Model {
	PostConstraint 待機中のコンテント同士で比較して価値の低い方はキャンセルする1 {
		description: "現在待機中より高いコンテントが来たら、現在待機中をキャンセルする"
		For-All Interrupt { x |
			!(pre)x.isVisible() AND (pre)x.isActive() AND
			Exists Interrupt { y |
				!(pre)y.isActive() AND (x.stateValue() < y.stateValue())
			}
			-> x.isCanceled()
		}
	}
	PostConstraint 待機中のコンテント同士で比較して価値の低い方はキャンセルする2 {
		description: "新しいコンテントより現在待機中が高い場合、新しいコンテントをキャンセルする"
		For-All Interrupt { x |
			!(pre)x.isActive() AND
			Exists Interrupt { y |
				!(pre)y.isVisible() AND (pre)y.isActive() AND
				(x.stateValue() <= y.stateValue())
			}
			-> x.isCanceled()
		}
	}

	ViewContent a1 {
		allocatable: [ A ] sizeReference: size1
		State HIGH { priority: 50 }
		State NORMAL { priority: 10 }
	}
	ViewContent b1 {
		allocatable: [ A ] sizeReference: size1
		State HIGH { priority: 50 }
		State NORMAL { priority: 10 }
	}
	ViewContent Winner {
		allocatable: [ A ] sizeReference: size1
		State HIGH { priority: 100 }
	}
	ViewContentSet Interrupt {
		target: [a1, b1, Winner]
	}

	Area A {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		visibility: STANDARD_VALUE
		zorder: STANDARD_VALUE sizeReference: size1
	}

	Display SampleDisplay {
		Size FullScreen { width: 400 height: 200 }
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer { x: 0 y: 0 areaReference: A }
			}
		}
	}
	Size size1 { width: 200 height: 200 }

}
