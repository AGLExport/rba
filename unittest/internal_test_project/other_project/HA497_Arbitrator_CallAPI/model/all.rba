Package Displays {
	Display DisplayA{
		Size Default {width: 1 height: 1} 
		CompositeArea Default {
			layout: FixedPositionLayout {
				PositionContainer {
					x:0
					y:0
					basePoint: LEFT_TOP
					areaReference: A
				}
				PositionContainer {
					x:0
					y:0
					basePoint: LEFT_TOP
					areaReference: B
				}
				PositionContainer {
					x:0
					y:0
					basePoint: LEFT_TOP
					areaReference: C
				}
			}
		}
	}
	Area A {
		Size Default {width: 1 height: 1}
		visibility: > That-of B
		zorder: STANDARD_VALUE
	}
	Area B {
		Size Default {width: 1 height: 1}
		visibility: > That-of C
		zorder: STANDARD_VALUE
	}
	Area C {
		Size Default {width: 1 height: 1}
		visibility: > That-of D
		zorder: STANDARD_VALUE
	}
	Area D {
		Size Default {width: 1 height: 1}
		visibility: > That-of E
		zorder: STANDARD_VALUE
	}
	Area E {
		Size Default {width: 1 height: 1}
		visibility: > MIN_VALUE
		zorder: STANDARD_VALUE
	}
	ViewContent A1{
		allocatable: [
			A
		]
		State NORMAL {
			priority: STANDARD_VALUE + 1
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent A2{
		allocatable: [
			A
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent B1 {
		allocatable: [
			B
		]
		State NORMAL {
			priority: STANDARD_VALUE + 1
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent B2 {
		allocatable: [
			B
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent C1 {
		allocatable: [
			C
		]
		State NORMAL {
			priority: STANDARD_VALUE + 2
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent C2 {
		allocatable: [
			C
		]
		State NORMAL {
			priority: STANDARD_VALUE + 1
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent C3 {
		allocatable: [
			C
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent D1 {
		allocatable: [
			D
		]
		State NORMAL {
			priority: STANDARD_VALUE + 2
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent D2 {
		allocatable: [
			D
		]
		State NORMAL {
			priority: STANDARD_VALUE + 1
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent D3 {
		allocatable: [
			D
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent E1 {
		allocatable: [
			E
		]
		State NORMAL {
			priority: STANDARD_VALUE + 2
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent E2 {
		allocatable: [
			E
		]
		State NORMAL {
			priority: STANDARD_VALUE + 1
		}
		Size Default {width: 1 height: 1}
	}
	ViewContent E3 {
		allocatable: [
			E
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		Size Default {width: 1 height: 1}
	}
	Scene S_local{
		
	}
	Scene S_global{
		global: true
		int P1:1
		int P2:10
		int P3:100
	}
	Constraint HA497_Arbitrator_CallAPI_setScene_1 {
		runtime: true
		S_local.isOn() -> A.allocatedContent() == A2
	}
	Constraint HA497_Arbitrator_CallAPI_setScene_2 {
		runtime: true
		S_global.isOn() -> B.allocatedContent() == B2
	}
	Constraint HA497_Arbitrator_CallAPI_setScene_3 {
		runtime: true
		S_global.P1.get() = 2 -> C.allocatedContent() == C2
	}
	Constraint HA497_Arbitrator_CallAPI_setScene_3_2 {
		runtime: true
		S_global.P1.get() = 1 -> C.allocatedContent() == C3
	}
	Constraint HA497_Arbitrator_CallAPI_setScene_4 {
		runtime: true
		S_global.P2.get() = 20 -> D.allocatedContent() == D2
	}
	Constraint HA497_Arbitrator_CallAPI_setScene_4_2 {
		runtime: true
		S_global.P2.get() = 10 -> D.allocatedContent() == D3
	}
	Constraint HA497_Arbitrator_CallAPI_setScene_5 {
		runtime: true
		S_global.P3.get() = 200 -> E.allocatedContent() == E2
	}
	Constraint HA497_Arbitrator_CallAPI_setScene_5_2 {
		runtime: true
		S_global.P3.get() = 100 -> E.allocatedContent() == E3
	}
}