Package SampleDisplays {
	Display Sample_METER{
		Size Sample_METER_FULLSCREEN {
			width: 500
			height: 400
		}
		CompositeArea Sample_METER_Root {
			layout: FixedPositionLayout {
				PositionContainer {
					x:100
					y:100
					basePoint: LEFT_TOP
					areaReference: A
				}
				PositionContainer {
					x:300
					y:0
					basePoint: LEFT_TOP
					areaReference: B
				}
				PositionContainer {
					x:300
					y:100
					basePoint: LEFT_TOP
					areaReference: C
				}
			}
		}
	}
	Size Aサイズ {
		width:300
		height:200
	}
	Size Bサイズ {
		width:200
		height:100
	}
	Size Cサイズ {
		width:200
		height:100
	}
	Area A {
		sizeReference:Aサイズ
		visibility: > That-of B
		zorder: > That-of B
	}
	Area B {
		sizeReference:Bサイズ
		visibility: > That-of C
		zorder: > That-of C
	}
	Area C {
		sizeReference:Cサイズ
		visibility: MIN_VALUE
		zorder: MIN_VALUE
	}
	ViewContent A1{
		allocatable: [
			A
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Aサイズ
	}
	ViewContent B1 {
		allocatable: [
			B
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Bサイズ
	}
	ViewContent C1 {
		allocatable: [
			C
		]
		State NORMAL {
			priority: STANDARD_VALUE + 1
		}
		sizeReference:Cサイズ
	}
	AreaSet 新規メッセージエリアG{
		target: [A,B,C]
	}
	Constraint 新規メッセージエリア間の調停 {
		description: "新規メッセージエリア間は優先度調停。優先度が同じ場合は先勝ち。"
		runtime: true
		For-All 新規メッセージエリアG { x |
			let xContent = x.allocatedContent()
			For-All 新規メッセージエリアG { y |
				let yContent = y.allocatedContent()
				(x!=y)->(xContent.stateValue() > yContent.stateValue() OR
					(xContent.stateValue() = yContent.stateValue() AND xContent.hasComeEarlierThan(yContent)) -> y.isHidden())
			}
		}
	}
}