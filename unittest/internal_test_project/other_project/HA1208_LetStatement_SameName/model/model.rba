Package SampleDisplays {
	Display Sample_METER{
		Size Sample_METER_FULLSCREEN {
			width: 500
			height: 400
		}
		CompositeArea Sample_METER_Root {
			layout: FixedPositionLayout {
				PositionContainer {
					x:100
					y:100
					basePoint: LEFT_TOP
					areaReference: A
				}
				PositionContainer {
					x:300
					y:0
					basePoint: LEFT_TOP
					areaReference: B
				}
				PositionContainer {
					x:300
					y:100
					basePoint: LEFT_TOP
					areaReference: C
				}
				PositionContainer {
					x:300
					y:100
					basePoint: LEFT_TOP
					areaReference: D
				}
				PositionContainer {
					x:300
					y:100
					basePoint: LEFT_TOP
					areaReference: E
				}
				PositionContainer {
					x:300
					y:100
					basePoint: LEFT_TOP
					areaReference: F
				}
				PositionContainer {
					x:300
					y:100
					basePoint: LEFT_TOP
					areaReference: G
				}
			}
		}
	}
	Size Aサイズ {
		width:300
		height:200
	}
	Size Bサイズ {
		width:200
		height:100
	}
	Size Cサイズ {
		width:200
		height:100
	}
	Size Dサイズ {
		width:200
		height:100
	}
	Size Eサイズ {
		width:200
		height:100
	}
	Size Fサイズ {
		width:200
		height:100
	}
	Size Gサイズ {
		width:200
		height:100
	}
	Area A {
		sizeReference:Aサイズ
		visibility: > That-of B
		zorder: > That-of B
	}
	Area B {
		sizeReference:Bサイズ
		visibility: > That-of C
		zorder: > That-of C
	}
	Area C {
		sizeReference:Cサイズ
		visibility: > That-of D
		zorder: > That-of D
	}
	Area D {
		sizeReference:Dサイズ
		visibility: MIN_VALUE
		zorder: MIN_VALUE
	}
	Area E {
		sizeReference:Eサイズ
		visibility: MIN_VALUE
		zorder: MIN_VALUE
	}
	Area F {
		sizeReference:Fサイズ
		visibility: MIN_VALUE
		zorder: MIN_VALUE
	}
	Area G {
		sizeReference:Fサイズ
		visibility: MIN_VALUE
		zorder: MIN_VALUE
	}
	ViewContent A1{
		allocatable: [
			A
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Aサイズ
	}
	ViewContent A2{
		allocatable: [
			A,C
		]
		State NORMAL {
			priority: STANDARD_VALUE  +1
		}
		sizeReference:Aサイズ
	}
	ViewContent B1 {
		allocatable: [
			B
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Bサイズ
	}
	ViewContent C1 {
		allocatable: [
			C
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Cサイズ
	}
	ViewContent D1 {
		allocatable: [
			D
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Dサイズ
	}
	ViewContent E1 {
		allocatable: [
			E
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Eサイズ
	}
	ViewContent F1 {
		allocatable: [
			F
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Fサイズ
	}
	ViewContent G1 {
		allocatable: [
			G
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Gサイズ
	}
	Constraint HA1208_LetStatement_SameName1 {
		runtime: true
		Exists {B,C}{x|
			let letX = A.allocatedContent()
			x.allocatedContent() == letX } -> 
			(Exists {D,E}{x|
				let letX = E1
				x.allocatedContent() == letX } ->
			F.isHidden()) 
	}
	Constraint HA1208_LetStatement_SameName2 {
		runtime: true
		let letX = G1
		letX.isVisible() -> !(A.allocatedContent() == A2)
	}
//	Constraint HA1208_LetStatement_SameName1 {
//		runtime: true
//		Exists {B,C}{x|
//			x.allocatedContent() == A.allocatedContent() } -> 
//			(Exists {D,E}{x|
//				x.allocatedContent() == E1 } ->
//			F.isHidden()) 
//	}
//	Constraint HA1208_LetStatement_SameName2 {
//		runtime: true
//		G1.isVisible() -> !(A.allocatedContent() == A2)
//	}
}