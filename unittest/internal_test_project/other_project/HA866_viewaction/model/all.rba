Package DefSeq_test {
	Display SampleDisplay {
		Size FullScreen {
			width: 600
			height: 200
		}
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer {
					x: 0
					y: 0
					areaReference: AreaA
				}
				PositionContainer {
					x: 200
					y: 0
					areaReference: AreaB
				}
				PositionContainer {
					x: 400
					y: 0
					areaReference: AreaC
				}
			}
		}
	}

	Area AreaA {
		arbitrationPolicy: DEFAULT
		sizeReference: SizeA
		visibility: > That-of AreaB
		zorder: STANDARD_VALUE
	}
	Area AreaB {
		arbitrationPolicy: DEFAULT
		sizeReference: SizeB
		visibility: > That-of AreaC
		zorder: STANDARD_VALUE
	}
	Area AreaC {
		arbitrationPolicy: DEFAULT
		sizeReference: SizeC
		visibility: NONE_VALUE
		zorder: STANDARD_VALUE
	}
	
	Zone ZoneA {
		 arbitrationPolicy: DEFAULT
		 visibility: > That-of ZoneB
         attenuateValue: 1
	}
	Zone ZoneB {
		 arbitrationPolicy: DEFAULT
		 visibility: > That-of ZoneC
         attenuateValue: 2
	}
	Zone ZoneC {
		 arbitrationPolicy: DEFAULT
		 visibility: NONE_VALUE
         attenuateValue: 3
	}

	Size SizeA {
		width: 200
		height: 200
	}
	Size SizeB {
		width: 200
		height: 200
	}
	Size SizeC {
		width: 200
		height: 200
	}

	ViewContent Content1 {
		allocatable: [
			AreaA, AreaB, AreaC
		]
		State NORMAL {
			priority: > That-of Content2.NORMAL
		}
		sizeReference: SizeA
	}
	ViewContent Content2 {
		allocatable: [
			AreaA, AreaB, AreaC
		]
		State NORMAL {
			priority: > That-of Content3.NORMAL
		}
		sizeReference: SizeA
	}
	ViewContent Content3 {
		allocatable: [
			AreaA, AreaB, AreaC
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference: SizeA
	}
	
	SoundContent SContent1 {
		allocatable: [
			ZoneA, ZoneB, ZoneC
		]

		State NORMAL {
			priority: > That-of SContent2.NORMAL
		}
	}
	SoundContent SContent2 {
		allocatable: [
			ZoneA, ZoneB, ZoneC
		]

		State NORMAL {
			priority: > That-of SContent3.NORMAL
		}
	}
	SoundContent SContent3 {
		allocatable: [
			ZoneA, ZoneB, ZoneC
		]

		State NORMAL {
			priority: STANDARD_VALUE
		}
	}

	Scene SceneAOff {}
	Scene SceneBOff {}
	Scene SceneCOff {}
	Scene HiddenMuteA {}
	Scene HiddenMuteB {}
	Scene HiddenMuteC {}
	Scene AttnA {}
	Scene AttnB {}
	Scene AttnC {}
	
	Constraint AllInstanceOfArea {
		runtime: true
		Exists ALL_AREAS { x | x.isDisplayed()}
	}
	Constraint AllInstanceOfZone {
		runtime: true
		Exists ALL_ZONES { x | x.isOutputted() }
	}
	Constraint AreaAOff {
		runtime: true
		SceneAOff.isOn() -> !AreaA.isDisplayed()
	}
	Constraint AreaBOff {
		runtime: true
		SceneBOff.isOn() -> !AreaB.isDisplayed()
	}
	Constraint AreaCOff {
		runtime: true
		SceneCOff.isOn() -> !AreaC.isDisplayed()
	}
	Constraint ZoneAOff {
		runtime: true
		SceneAOff.isOn() -> !ZoneA.isOutputted()
	}
	Constraint ZoneBOff {
		runtime: true
		SceneBOff.isOn() -> !ZoneB.isOutputted()
	}
	Constraint ZoneCOff {
		runtime: true
		SceneCOff.isOn() -> !ZoneC.isOutputted()
	}
	Constraint HiddenA {
		runtime: true
		HiddenMuteA.isOn() -> (AreaA.isDisplayed() -> AreaA.isHidden())
	}
	Constraint HiddenB {
		runtime: true
		HiddenMuteB.isOn() -> (AreaB.isDisplayed() -> AreaB.isHidden())
	}
	Constraint HiddenC {
		runtime: true
		HiddenMuteC.isOn() -> (AreaC.isDisplayed() -> AreaC.isHidden())
	}
	Constraint MuteA {
		runtime: true
		HiddenMuteA.isOn() -> (ZoneA.isOutputted() -> ZoneA.isMuted())
	}
	Constraint MuteB {
		runtime: true
		HiddenMuteB.isOn() -> (ZoneB.isOutputted() -> ZoneB.isMuted())
	}
	Constraint MuteC {
		runtime: true
		HiddenMuteC.isOn() -> (ZoneC.isOutputted() -> ZoneC.isMuted())
	}
	Constraint AttenuatedA {
		runtime: true
		AttnA.isOn() -> (ZoneA.isOutputted() -> ZoneA.isAttenuated())
	}
	Constraint AttenuatedB {
		runtime: true
		AttnB.isOn() -> (ZoneB.isOutputted() -> ZoneB.isAttenuated())
	}
	Constraint AttenuatedC {
		runtime: true
		AttnC.isOn() -> (ZoneC.isOutputted() -> ZoneC.isAttenuated())
	}
}
