Package Constraints {
	Constraint PCSの割込時における非表示エリア制約 {
		description: "PCSの割込みメッセージがあるときは、他のエリアを非表示にする"
		runtime: true
		PCS.isVisible() -> For-All その他のエリア { x | x.isHidden() }
	}
	
	Constraint 外気温の重複制約 {
		description: "METに外気温が表示されているならばHUDには表示しない"
		runtime: true
		外気温エリア.isDisplayed() -> HUD_外気温エリア.isHidden()
	}
	
	Constraint HUDオフによるHUD非表示制約 {
		description: "HUDオフならばHUDは表示しない"
		runtime: true
		HUDオフシーン.isOn() -> For-All HUD全エリア { x | x.isHidden() }
	}

	Constraint ナビ音声・着信音優先制約 {
		description: "ナビ・着信音が再生されているならば、音楽再生は減衰させる"
		runtime: true
		案内音声.isSounding() OR 着信音.isSounding()-> 基本音声出力ゾーン.isAttenuated()
	}

	Constraint 警告音最優先制約 {
		description: "警告音が再生されているならば、音楽再生はミュート"
		runtime: true
		警告音.isSounding()-> 基本音声出力ゾーン.isMuted()
	}

	Constraint 表示と音の同期制約 {
		description: "オーディオが表示されていたら音楽再生する"
		runtime: true
		オーディオ.isVisible() -> 音楽.isSounding()
	}

	PostConstraint test {
		For-All 割込みコンテンツ群{c|!c.isVisible()->c.isCanceled()}
	}

	PostConstraint インフラ協調を待機させる後処理制約 {
		description: "インフラ協調は、TELに調停負けした場合は待機する"
		インフラ協調.isDefeatedBy(TEL) -> !インフラ協調.isCanceled()
	}

	Constraint 意図しない振舞を検出するオフライン制約 {
		description: "前回非表示のコンテンツが今回表示されて良いかチェックする"
		runtime: false
		For-All ALL_VIEWCONTENTS { x |
			((!(pre)x.isVisible() AND x.isVisible())
				-> (!(pre)x.isActive() OR
					Exists x.allocatables() { a | ((a.displayingContent() == x) AND (
						((pre)a.isDisplayed() AND !(pre)a.displayingContent().isActive()) OR (pre)a.isHidden()
					))}
				)
			)
		}
	}

}
