Package Displays {
	Display SampleDisplay {
		Size FullScreen {
			width: 400
			height: 200
		}
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer {	x: 0 y: 0 areaReference: エリアA }
				PositionContainer {	x: 200 y: 0 areaReference: エリアB }
			}
		}
	}
	Area エリアA {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアAサイズ
		visibility: STANDARD_VALUE
		zorder: STANDARD_VALUE
	}
	Area エリアB {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアAサイズ
		visibility: STANDARD_VALUE
		zorder: STANDARD_VALUE
	}
	Size エリアAサイズ {width: 200 height: 200}

	ViewContent コンテンツA1{
		allocatable: [エリアA]
		State NORMAL {
			priority: > That-of コンテンツA2.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツA2{
		allocatable: [エリアA]
		State NORMAL {
			priority: > That-of コンテンツA3.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツA3{
		allocatable: [エリアA]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference: エリアAサイズ
	}

	ViewContent コンテンツB1{
		allocatable: [エリアB]
		State NORMAL {
			priority: > That-of コンテンツB2.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツB2{
		allocatable: [エリアB]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference: エリアAサイズ
	}
	
	//シーン要求（ローカル）を受けて制約式を評価する
	Scene s1_Local {}
	Constraint s1_Local_change_A1notVisible {
		runtime: true
		(((pre)s1_Local.isOn() AND !s1_Local.isOn()) OR
		 (!(pre)s1_Local.isOn() AND s1_Local.isOn())) -> !コンテンツA1.isVisible()
	}
	Constraint s1_Local_notchange_B1notVisible {
		runtime: true
		!(((pre)s1_Local.isOn() AND !s1_Local.isOn()) OR
		  (!(pre)s1_Local.isOn() AND s1_Local.isOn())) -> !コンテンツB1.isVisible()
	}
	
	//シーン要求（グローバル）を受けて制約式を評価する
	Scene s2_Global {global: true}
	Constraint s2_Global_change_A2notVisible {
		runtime: true
		(((pre)s2_Global.isOn() AND !s2_Global.isOn()) OR
		 (!(pre)s2_Global.isOn() AND s2_Global.isOn())) -> !コンテンツA2.isVisible()
	}
	Constraint s2_Global_notchange_B2notVisible {
		runtime: true
		!(((pre)s2_Global.isOn() AND !s2_Global.isOn()) OR
		  (!(pre)s2_Global.isOn() AND s2_Global.isOn())) -> !コンテンツB2.isVisible()
	}
}
