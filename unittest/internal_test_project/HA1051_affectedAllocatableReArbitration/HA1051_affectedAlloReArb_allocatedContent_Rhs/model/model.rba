Package SampleDisplays {
	Display Sample_METER{
		Size Sample_METER_FULLSCREEN {
			width: 500
			height: 400
		}
		CompositeArea Sample_METER_Root {
			layout: FixedPositionLayout {
				PositionContainer {
					x:100
					y:100
					basePoint: LEFT_TOP
					areaReference: A
				}
				PositionContainer {
					x:300
					y:0
					basePoint: LEFT_TOP
					areaReference: B
				}
				PositionContainer {
					x: 50
					y: 250
					basePoint: LEFT_TOP
					areaReference: P
				}
			}
		}
	}
	Size Aサイズ {
		width:300
		height:200
	}
	Size Bサイズ {
		width:200
		height:100
	}
	Size Pサイズ {
		width:400
		height:100		
	}
	Area A {
		sizeReference:Aサイズ
		visibility: > That-of B
		zorder: > That-of B
	}
	Area B {
		sizeReference:Bサイズ
		visibility:  > That-of P
		zorder: > That-of P
	}
	Area P {
		sizeReference:Pサイズ
		visibility: NONE_VALUE
		zorder: MIN_VALUE
	}
	ViewContent A1{
		allocatable: [
			A
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Aサイズ
	}
	ViewContent B1 {
		allocatable: [
			B
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Bサイズ
	}
	ViewContent P1 {
		allocatable: [
			P
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference:Pサイズ
	}
	Constraint HA1051_影響エリアの再調停テスト_1 {
		runtime: true
		A.isDisplayed() -> !(B.allocatedContent() == B1)
	}
	Constraint HA1051_影響エリアの再調停テスト_2 {
		runtime: true
		P.isDisplayed() -> !A.isDisplayed()
	}
}