Package Model {
	ViewContentSet A1_add_allocatableA {
		allocatable: [Set1]
		target: [ContentA1]
	}
	Constraint allocatable_A_check{
		runtime: true
		For-All A1_add_allocatableA{x| x.isVisible()} -> AllocatableC.isHidden()
	}
	Constraint allocatable_A_check2{
		runtime: true
		For-All A1_add_allocatableA{x| !x.isVisible()} -> AllocatableD.isHidden()
	}
	AreaSet Set1 {
		target: [ AllocatableB, AllocatableE ]
	}

	Area AllocatableA {
		arbitrationPolicy: DEFAULT
		sizeReference: Size1
		visibility: STANDARD_VALUE
		zorder: STANDARD_VALUE
	}
	Area AllocatableB {
		arbitrationPolicy: DEFAULT
		sizeReference: Size1
		visibility: < That-of AllocatableA
		zorder: STANDARD_VALUE
	}
	Area AllocatableC {
		arbitrationPolicy: DEFAULT
		sizeReference: Size1
		visibility: < That-of AllocatableB
		zorder: STANDARD_VALUE
	}
	Area AllocatableD {
		arbitrationPolicy: DEFAULT
		sizeReference: Size1
		visibility: < That-of AllocatableC
		zorder: STANDARD_VALUE
	}
	Area AllocatableE {
		arbitrationPolicy: DEFAULT
		sizeReference: Size1
		visibility: < That-of AllocatableD
		zorder: STANDARD_VALUE
	}

	ViewContent ContentA1{
		allocatable: [ AllocatableA ]
		State NORMAL { priority: STANDARD_VALUE }
		sizeReference: Size1
	}
	ViewContent ContentA2{
		allocatable: [ AllocatableA ]
		State NORMAL { priority: STANDARD_VALUE }
		sizeReference: Size1
	}
	ViewContent ContentB1 {
		allocatable: [ AllocatableB ]
		State NORMAL { priority: < That-of ContentA1.NORMAL }
		sizeReference: Size1
	}
	ViewContent ContentB2 {
		allocatable: [ AllocatableB ]
		State NORMAL { priority: < That-of ContentA1.NORMAL }
		sizeReference: Size1
	}
	ViewContent ContentC1 {
		allocatable: [ AllocatableC ]
		State NORMAL { priority: < That-of ContentB1.NORMAL }
		sizeReference: Size1
	}
	ViewContent ContentD1{
		allocatable: [ AllocatableD ]
		State NORMAL { priority: < That-of ContentC1.NORMAL }
		sizeReference: Size1
	}
	ViewContent ContentE1{
		allocatable: [ AllocatableE ]
		State NORMAL { priority: < That-of ContentD1.NORMAL }
		sizeReference: Size1
	}

	Display SampleDisplay {
		Size FullScreen { width: 1500 height: 200 }
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer { x: 0 y: 0 areaReference: AllocatableA }
				PositionContainer { x: 400 y: 0 areaReference: AllocatableB }
				PositionContainer { x: 600 y: 0 areaReference: AllocatableC }
				PositionContainer { x: 900 y: 0 areaReference: AllocatableD }
				PositionContainer { x: 1200 y: 0 areaReference: AllocatableE }
			}
		}
	}
	Size Size1 { width: 200 height: 200 }
}
