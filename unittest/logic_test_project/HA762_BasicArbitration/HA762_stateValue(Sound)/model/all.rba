Package Sounds {
	Zone A {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		visibility: > That-of B
	}
	Zone B {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		visibility: > That-of C
	}
	Zone C {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		visibility: > That-of D
	}
	Zone D {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		visibility: STANDARD_VALUE
	}

	Size size1 {width: 100 height: 200}

	SoundContent a1{
		allocatable: [A]
		State S1 {priority: MAX_VALUE}
		State S2 {priority: STANDARD_VALUE}
		State S3 {priority: MIN_VALUE}
	}
	SoundContent a2{
		allocatable: [A]
		State S1 {priority: MAX_VALUE}
		State S2 {priority: STANDARD_VALUE}
		State S3 {priority: MIN_VALUE}
	}
	SoundContent b1{
		allocatable: [B]
		State S1 {priority: MAX_VALUE}
		State S2 {priority: STANDARD_VALUE}
		State S3 {priority: MIN_VALUE}
	}
	SoundContent c1{
		allocatable: [C]
		State S1 {priority: MAX_VALUE}
		State S2 {priority: STANDARD_VALUE}
		State S3 {priority: MIN_VALUE}
	}
	SoundContent d1{
		allocatable: [D]
		State S1 {priority: MAX_VALUE}
		State S2 {priority: STANDARD_VALUE}
		State S3 {priority: MIN_VALUE}
	}

	Constraint BisMuted {
		runtime: true
		B.isMuted()
	}
	Constraint getstateValue_Muted {
		runtime: true
		(a1.stateValue() = 10) -> C.isMuted() 
	}
	Constraint getstateValue_Muted2 {
		runtime: true
		(a1.stateValue() = b1.stateValue()) -> C.isMuted() 
	}
	Constraint DisAttenuated {
		runtime: true
		D.isAttenuated()
	}
	Constraint getstateValue_Muted3 {
		runtime: true
		(d1.stateValue() = 9999) -> C.isMuted()
	}
}
