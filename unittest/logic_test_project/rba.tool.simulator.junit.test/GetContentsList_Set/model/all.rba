Package Displays {
	Display SampleDisplay {
		Size FullScreen {
			width: 600
			height: 400
		}
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer {
					x: 0
					y: 0
					areaReference: エリアA
				}
				PositionContainer {
					x: 200
					y: 0
					areaReference: エリアB
				}
				PositionContainer {
					x: 400
					y: 0
					areaReference: エリアC
				}
				PositionContainer {
					x: 0
					y: 200
					areaReference: エリアD
				}
				PositionContainer {
					x: 200
					y: 200
					areaReference: エリアE
				}
				PositionContainer {
					x: 400
					y: 200
					areaReference: エリアF
				}
			}
		}
	}

	Area エリアA {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		sizeReference: サイズ
		visibility: > That-of エリアB
		zorder: STANDARD_VALUE
	}
	Area エリアB {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		sizeReference: サイズ
		visibility: > That-of エリアC
		zorder: STANDARD_VALUE
	}
	Area エリアC {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		sizeReference: サイズ
		visibility: > That-of エリアD
		zorder: STANDARD_VALUE
	}
	Area エリアD {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		sizeReference: サイズ
		visibility: > That-of エリアE
		zorder: STANDARD_VALUE
	}
	Area エリアE {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		sizeReference: サイズ
		visibility: > That-of エリアF
		zorder: STANDARD_VALUE
	}
	Area エリアF {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		sizeReference: サイズ
		visibility: MIN_VALUE
		zorder: STANDARD_VALUE
	}

	Size サイズ {
		width: 200
		height: 200
	}

	AreaSet エリアセットBC {
		target:[エリアB, エリアC]
	}
	AreaSet エリアセットABC {
		target:[エリアA, エリアセットBC]
	}

	AreaSet エリアセットDE {
		target:[エリアD, エリアE]
	}
	AreaSet エリアセットDE2 {
		target:[エリアD, エリアセットDE]
	}

	ViewContentSet コンテントセットXY {
		target:[コンテントX, コンテントY]
		allocatable:[エリアセットDE2]
	}

	ViewContent コンテントX {
		allocatable: [
			エリアセットABC
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference: サイズ
	}

	ViewContent コンテントY {
		allocatable: [
			エリアF
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference: サイズ
	}

	Constraint GetContentsList {
		runtime: true
		Exists エリアD.contentsList() { x | x.isVisible() }
	}
}