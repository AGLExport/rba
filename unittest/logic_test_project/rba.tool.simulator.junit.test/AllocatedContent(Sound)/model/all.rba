Package Displays {
	Zone ゾーンA {
		arbitrationPolicy: DEFAULT
		visibility: > That-of ゾーンB
		attenuateValue:1
	}
	Zone ゾーンB {
		arbitrationPolicy: DEFAULT
		visibility: STANDARD_VALUE
		attenuateValue:2
	}
	Zone ゾーンC {
		arbitrationPolicy: DEFAULT
		visibility: STANDARD_VALUE
		attenuateValue:3
	}

	ZoneSet ゾーンAとゾーンB {
		target:[ゾーンA,ゾーンB]
	}
	ZoneSet ゾーンAとゾーンC {
		target:[ゾーンA,ゾーンC]
	}
	ZoneSet ゾーンBとゾーンC {
		target:[ゾーンB,ゾーンC]
	}
	ZoneSet 全ゾーン {
		target:[ゾーンAとゾーンB, ゾーンAとゾーンC, ゾーンBとゾーンC]
	}

	SoundContent コンテントA1{
		allocatable: [
			ゾーンA
		]
		State NORMAL {
			priority: > That-of コンテントB1.NORMAL
		}
	}
	SoundContent コンテントB1 {
		allocatable: [
			ゾーンB
		]
		State NORMAL {
			priority: > That-of コンテントC1.NORMAL
		}
	}
	SoundContent コンテントC1 {
		allocatable: [
			ゾーンC
		]
		State NORMAL {
			priority: > That-of コンテントA2.NORMAL
		}
	}
	SoundContent コンテントA2{
		allocatable: [
			ゾーンA
		]
		State NORMAL {
			priority: > That-of コンテントB2.NORMAL
		}
	}
	SoundContent コンテントB2 {
		allocatable: [
			ゾーンB
		]
		State NORMAL {
			priority: > That-of コンテントC2.NORMAL
		}
	}
	SoundContent コンテントC2 {
		allocatable: [
			ゾーンC
		]
		State NORMAL {
			priority: > That-of コンテントA3.NORMAL
		}
	}
	SoundContent コンテントA3{
		allocatable: [
			ゾーンA
		]
		State NORMAL {
			priority: > That-of コンテントB3.NORMAL
		}
	}
	SoundContent コンテントB3 {
		allocatable: [
			ゾーンB
		]
		State NORMAL {
			priority: > That-of コンテントC3.NORMAL
		}
	}
	SoundContent コンテントC3 {
		allocatable: [
			ゾーンC
		]
		State NORMAL {
			priority: MIN_VALUE
		}
	}

	SoundContentSet コンテントAとコンテントB {
		target:[コンテントA1, コンテントB1]
	}
	SoundContentSet コンテントAとコンテントC {
		target:[コンテントA1,コンテントC1]
	}
	SoundContentSet コンテントBとコンテントC {
		target:[コンテントB1,コンテントC1]
	}
	SoundContentSet 全コンテント {
		target:[コンテントAとコンテントB,コンテントAとコンテントC,コンテントBとコンテントC]
	}

	Constraint ゾーンAがゾーンBより価値の高いコンテントを表示しているならゾーンBをミュートする {
		runtime: true
		ゾーンA.contentValue() > ゾーンB.contentValue() -> ゾーンB.isMuted()
	}
	Constraint ゾーンBがコンテントB3を割り当てているならゾーンCをミュートする {
		runtime: true
		ゾーンB.allocatedContent() == コンテントB3 -> ゾーンC.isMuted()
	}
	Constraint ゾーンCがゾーンBより価値の高いコンテントを表示しているならゾーンBをミュートする {
		runtime: true
		ゾーンC.contentValue() > ゾーンB.contentValue() -> ゾーンB.isMuted()
	}
}
