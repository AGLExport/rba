Package Displays {
	Display SampleDisplay {
		Size FullScreen {
			width: 1500
			height: 200
		}
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer {
					x: 0
					y: 0
					areaReference: エリアA
				}
				PositionContainer {
					x: 400
					y: 0
					areaReference: エリアB
				}
				PositionContainer {
					x: 600
					y: 0
					areaReference: エリアC
				}
				PositionContainer {
					x: 900
					y: 0
					areaReference: エリアD
				}
				PositionContainer {
					x: 1000
					y: 0
					areaReference: エリアE
				}
			}
		}
	}

	Area エリアA {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアAサイズ
		visibility: > That-of エリアB
		zorder: STANDARD_VALUE
	}
	Area エリアB {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアBサイズ
		visibility: > That-of エリアC
		zorder: STANDARD_VALUE
	}
	Area エリアC {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアCサイズ
		visibility: > That-of エリアD
		zorder: STANDARD_VALUE
	}
	Area エリアD {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアDサイズ
		visibility: > That-of エリアE
		zorder: STANDARD_VALUE
	}
	Area エリアE {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアEサイズ
		visibility: NONE_VALUE
		zorder: STANDARD_VALUE
	}

	Size エリアAサイズ {
		width: 400
		height: 200
	}
	Size エリアBサイズ {
		width: 200
		height: 200
	}
	Size エリアCサイズ {
		width: 300
		height: 200
	}
	Size エリアDサイズ {
		width: 100
		height: 200
	}
	Size エリアEサイズ {
		width: 500
		height: 200
	}

	ViewContent コンテンツA1{
		allocatable: [
			エリアA
		]
		State NORMAL {
			priority: > That-of コンテンツB1.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツB1 {
		allocatable: [
			エリアB
		]
		State NORMAL {
			priority: > That-of コンテンツC1.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツC1 {
		allocatable: [
			エリアC
		]
		State NORMAL {
			priority: > That-of コンテンツD1.NORMAL
		}
		sizeReference: エリアCサイズ
	}
	ViewContent コンテンツD1 {
		allocatable: [
			エリアD
		]
		State NORMAL {
			priority: > That-of コンテンツE1.NORMAL
		}
		sizeReference: エリアDサイズ
	}
	ViewContent コンテンツE1 {
		allocatable: [
			エリアE
		]
		State NORMAL {
			priority: > That-of コンテンツA2.NORMAL
		}
		sizeReference: エリアEサイズ
	}
	ViewContent コンテンツA2{
		allocatable: [
			エリアA
		]
		State NORMAL {
			priority: > That-of コンテンツB2.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツB2 {
		allocatable: [
			エリアB
		]
		State NORMAL {
			priority: > That-of コンテンツC2.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツC2 {
		allocatable: [
			エリアC
		]
		State NORMAL {
			priority: > That-of コンテンツD2.NORMAL
		}
		sizeReference: エリアCサイズ
	}
	ViewContent コンテンツD2 {
		allocatable: [
			エリアD
		]
		State NORMAL {
			priority: > That-of コンテンツE2.NORMAL
		}
		sizeReference: エリアDサイズ
	}
	ViewContent コンテンツE2 {
		allocatable: [
			エリアE
		]
		State NORMAL {
			priority: STANDARD_VALUE
		}
		sizeReference: エリアEサイズ
	}

	Constraint SetOfOperator_Area {
		runtime: true
		Exists {エリアB,エリアD} { x | !x.isDisplayed()}
	}
}
