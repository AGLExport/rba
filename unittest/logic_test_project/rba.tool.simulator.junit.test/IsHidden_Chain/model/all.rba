Package Displays {
	Display SampleDisplay {
		Size FullScreen {
			width: 900
			height: 400
		}
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer {
					x: 0
					y: 0
					areaReference: エリアA
				}
				PositionContainer {
					x: 400
					y: 0
					areaReference: エリアB
				}
				PositionContainer {
					x: 600
					y: 0
					areaReference: エリアC
				}
				PositionContainer {
					x: 0
					y: 200
					areaReference: エリアD
				}
				PositionContainer {
					x: 400
					y: 200
					areaReference: エリアE
				}
				PositionContainer {
					x: 600
					y: 200
					areaReference: エリアF
				}
			}
		}
	}

	Area エリアA {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアAサイズ
		visibility: > That-of エリアB
		zorder: STANDARD_VALUE
	}
	Area エリアB {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアBサイズ
		visibility: > That-of エリアC
		zorder: STANDARD_VALUE
	}
	Area エリアC {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアCサイズ
		visibility: > That-of エリアD
		zorder: STANDARD_VALUE
	}
	Area エリアD {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアAサイズ
		visibility: > That-of エリアE
		zorder: STANDARD_VALUE
	}
	Area エリアE {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアBサイズ
		visibility: > That-of エリアF
		zorder: STANDARD_VALUE
	}
	Area エリアF {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアCサイズ
		visibility: > MIN_VALUE
		zorder: STANDARD_VALUE
	}


	Size エリアAサイズ {
		width: 400
		height: 200
	}
	Size エリアBサイズ {
		width: 200
		height: 200
	}
	Size エリアCサイズ {
		width: 300
		height: 200
	}

	ViewContent コンテンツA1{
		allocatable: [
			エリアA
		]
		State NORMAL {
			priority: > That-of コンテンツB1.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツB1 {
		allocatable: [
			エリアB
		]
		State NORMAL {
			priority: > That-of コンテンツC1.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツC1 {
		allocatable: [
			エリアC
		]
		State NORMAL {
			priority: > That-of コンテンツD1.NORMAL
		}
		sizeReference: エリアCサイズ
	}
	ViewContent コンテンツD1{
		allocatable: [
			エリアD
		]
		State NORMAL {
			priority: > That-of コンテンツE1.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツE1 {
		allocatable: [
			エリアE
		]
		State NORMAL {
			priority: > That-of コンテンツF1.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツF1 {
		allocatable: [
			エリアF
		]
		State NORMAL {
			priority: > That-of コンテンツA2.NORMAL
		}
		sizeReference: エリアCサイズ
	}
	ViewContent コンテンツA2{
		allocatable: [
			エリアA
		]
		State NORMAL {
			priority: > That-of コンテンツB2.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツB2 {
		allocatable: [
			エリアB
		]
		State NORMAL {
			priority: > That-of コンテンツC2.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツC2 {
		allocatable: [
			エリアC
		]
		State NORMAL {
			priority: That-of コンテンツD2.NORMAL
		}
		sizeReference: エリアCサイズ
	}
	ViewContent コンテンツD2{
		allocatable: [
			エリアD
		]
		State NORMAL {
			priority: > That-of コンテンツE2.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツE2 {
		allocatable: [
			エリアE
		]
		State NORMAL {
			priority: > That-of コンテンツF2.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツF2 {
		allocatable: [
			エリアF
		]
		State NORMAL {
			priority: MIN_VALUE
		}
		sizeReference: エリアCサイズ
	}

	Constraint Aが表示中はBを隠蔽する {
		runtime: true
		エリアA.isDisplayed() -> エリアB.isHidden()
	}
	Constraint Bのコンテントの価値がCより大きければCを隠蔽する {
		runtime: true
		エリアB.contentValue() > エリアC.contentValue() -> エリアC.isHidden()
	}

	Constraint Fが表示中はEを隠蔽する {
		runtime: true
		エリアF.isDisplayed() -> エリアE.isHidden()
	}
	Constraint Eのコンテントの価値がDより大きければDを隠蔽する {
		runtime: true
		エリアE.contentValue() > エリアD.contentValue() -> エリアD.isHidden()
	}
}
