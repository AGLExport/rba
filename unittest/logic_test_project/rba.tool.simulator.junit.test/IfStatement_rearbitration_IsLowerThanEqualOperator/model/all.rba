Package Displays {
	Display SampleDisplay {
		Size FullScreen {
			width: 400
			height: 200
		}
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer {
					x: 0
					y: 0
					areaReference: A
				}
				PositionContainer {
					x: 200
					y: 0
					areaReference: B
				}
			}
		}
	}

	Area A {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		sizeReference: DefaultSize
		visibility: > That-of B
		zorder: STANDARD_VALUE
	}
	Area B {
		arbitrationPolicy: PRIORITY_LAST_COME_FIRST
		sizeReference: DefaultSize
		visibility: MIN_VALUE
		zorder: STANDARD_VALUE
	}

	Size DefaultSize {
		width: 200
		height: 200
	}

	ViewContent A_HIGH {
		allocatable: [
			A
		]
		State NORMAL {
			priority: 10
		}
		sizeReference: DefaultSize
	}
	ViewContent A_LOW {
		allocatable: [
			A
		]
		State NORMAL {
			priority: 0
		}
		sizeReference: DefaultSize
	}
	ViewContent B_HIGH {
		allocatable: [
			B
		]
		State NORMAL {
			priority: 10
		}
		sizeReference: DefaultSize
	}
	ViewContent B_LOW {
		allocatable: [
			B
		]
		State NORMAL {
			priority: 0
		}
		sizeReference: DefaultSize
	}

	Constraint AかBを隠す {
		runtime: true
		IF(A.isDisplayed() AND (A.contentValue() <= B.contentValue()))
		THEN B.isHidden()
		ELSE B.isDisplayed() -> A.isHidden()
	}
}
