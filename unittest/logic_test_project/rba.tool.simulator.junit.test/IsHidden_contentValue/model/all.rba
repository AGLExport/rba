Package Displays {
	Display SampleDisplay {
		Size FullScreen {
			width: 900
			height: 200
		}
		CompositeArea SampleCompositeArea {
			layout: FixedPositionLayout {
				PositionContainer {
					x: 0
					y: 0
					areaReference: エリアA
				}
				PositionContainer {
					x: 400
					y: 0
					areaReference: エリアB
				}
				PositionContainer {
					x: 600
					y: 0
					areaReference: エリアC
				}
			}
		}
	}

	Area エリアA {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアAサイズ
		visibility: > That-of エリアB
		zorder: STANDARD_VALUE
	}
	Area エリアB {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアBサイズ
		visibility: > That-of エリアC
		zorder: STANDARD_VALUE
	}
	Area エリアC {
		arbitrationPolicy: DEFAULT
		sizeReference: エリアCサイズ
		visibility: NONE_VALUE
		zorder: STANDARD_VALUE
	}

	Size エリアAサイズ {
		width: 400
		height: 200
	}
	Size エリアBサイズ {
		width: 200
		height: 200
	}
	Size エリアCサイズ {
		width: 300
		height: 200
	}


	ViewContent コンテンツA1{
		allocatable: [
			エリアA
		]
		State NORMAL {
			priority: > That-of コンテンツB1.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツB1 {
		allocatable: [
			エリアB
		]
		State NORMAL {
			priority: > That-of コンテンツC1.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツC1 {
		allocatable: [
			エリアC
		]
		State NORMAL {
			priority: > That-of コンテンツA2.NORMAL
		}
		sizeReference: エリアCサイズ
	}
	ViewContent コンテンツA2{
		allocatable: [
			エリアA
		]
		State NORMAL {
			priority: > That-of コンテンツB2.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツB2 {
		allocatable: [
			エリアB
		]
		State NORMAL {
			priority: > That-of コンテンツC2.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツC2 {
		allocatable: [
			エリアC
		]
		State NORMAL {
			priority: > That-of コンテンツA3.NORMAL
		}
		sizeReference: エリアCサイズ
	}
	ViewContent コンテンツA3{
		allocatable: [
			エリアA
		]
		State NORMAL {
			priority: > That-of コンテンツB3.NORMAL
		}
		sizeReference: エリアAサイズ
	}
	ViewContent コンテンツB3 {
		allocatable: [
			エリアB
		]
		State NORMAL {
			priority: > That-of コンテンツC3.NORMAL
		}
		sizeReference: エリアBサイズ
	}
	ViewContent コンテンツC3 {
		allocatable: [
			エリアC
		]
		State NORMAL {
			priority: MIN_VALUE
		}
		sizeReference: エリアCサイズ
	}

	Constraint エリアAコンテンツがエリアBコンテンツより高優先ならエリアBを隠蔽する {
		runtime: true
		(エリアA.contentValue() > エリアB.contentValue()) -> エリアB.isHidden()
	}
	Constraint エリアBコンテンツがエリアCコンテンツより高優先ならエリアCを隠蔽する {
		runtime: true
		(エリアB.contentValue() > エリアC.contentValue()) -> エリアC.isHidden()
	}
	Constraint エリアCコンテンツがエリアBコンテンツより高優先ならエリアBを隠蔽する {
		runtime: true
		(エリアC.contentValue() > エリアB.contentValue()) -> エリアB.isHidden()
	}
	Constraint エリアBコンテンツがエリアAコンテンツより高優先ならエリアAを隠蔽する {
		runtime: true
		(エリアB.contentValue() > エリアA.contentValue()) -> エリアA.isHidden()
	}

}
