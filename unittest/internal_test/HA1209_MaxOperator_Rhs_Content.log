#Request#C,on,A1,NORMAL,1
#Request#C,off,B1,NORMAL,0
#Request#C,off,B1,WARNING,0
#Request#C,off,X1,NORMAL,0
#Request#C,off,Y1,NORMAL,0
#Request#S,off,S1
#Request#S,off,S2
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_3,t
#Constraint#EXPRESSION	->#left.isOn()	S2.isOn()	f
#Constraint#EXPRESSION	->	(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_4,t
#Constraint#EXPRESSION	->#left==	ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1	t
#Constraint#EXPRESSION	->#right.isHidden()	Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden()	f
#Constraint#EXPRESSION	->	(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())	skip
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#B1,WARNING,f
#CanceledRequest#X1,NORMAL,f
#CanceledRequest#Y1,NORMAL,f
#Result#A,A,A1
#Result#A,B,
#Result#A,X,
#Result#A,Y,
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_3,t
#Constraint#EXPRESSION	->#left.isOn()	S2.isOn()	f
#Constraint#EXPRESSION	->	(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_4,t
#Constraint#EXPRESSION	->#left==	ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1	t
#Constraint#EXPRESSION	->#right.isHidden()	Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden()	f
#Constraint#EXPRESSION	->	(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())	skip
#Constraint#END
#PrevResult#A,A,A1,NORMAL
#Request#C,on,A1,NORMAL,1
#Request#C,off,B1,NORMAL,0
#Request#C,off,B1,WARNING,0
#Request#C,off,X1,NORMAL,0
#Request#C,off,Y1,NORMAL,0
#Request#S,off,S1
#Request#S,on,S2
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_3,t
#Constraint#EXPRESSION	->#left.isOn()	S2.isOn()	t
#Constraint#EXPRESSION	->#right!#.isVisible()	{A1}.max{ x |x.stateValue()}.isVisible()	t
#Constraint#EXPRESSION	->#right!	!{A1}.max{ x |x.stateValue()}.isVisible()	f
#Constraint#EXPRESSION	->	(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())	f
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_3,t
#Constraint#EXPRESSION	->#left.isOn()	S2.isOn()	t
#Constraint#EXPRESSION	->#right!#.isVisible()	{A1}.max{ x |x.stateValue()}.isVisible()	f
#Constraint#EXPRESSION	->#right!	!{A1}.max{ x |x.stateValue()}.isVisible()	t
#Constraint#EXPRESSION	->	(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_4,t
#Constraint#EXPRESSION	->#left==	ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1	t
#Constraint#EXPRESSION	->#right.isHidden()	Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden()	f
#Constraint#EXPRESSION	->	(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())	skip
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#B1,WARNING,f
#CanceledRequest#X1,NORMAL,f
#CanceledRequest#Y1,NORMAL,f
#Result#A,A,
#Result#A,B,
#Result#A,X,
#Result#A,Y,
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_3,t
#Constraint#EXPRESSION	->#left.isOn()	S2.isOn()	t
#Constraint#EXPRESSION	->#right!#.isVisible()	{A1}.max{ x |x.stateValue()}.isVisible()	f
#Constraint#EXPRESSION	->#right!	!{A1}.max{ x |x.stateValue()}.isVisible()	t
#Constraint#EXPRESSION	->	(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_4,t
#Constraint#EXPRESSION	->#left==	ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1	t
#Constraint#EXPRESSION	->#right.isHidden()	Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden()	f
#Constraint#EXPRESSION	->	(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())	skip
#Constraint#END
#Request#C,on,A1,NORMAL,1
#Request#C,off,B1,NORMAL,0
#Request#C,off,B1,WARNING,0
#Request#C,off,X1,NORMAL,0
#Request#C,off,Y1,NORMAL,0
#Request#S,off,S1
#Request#S,off,S2
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_3,t
#Constraint#EXPRESSION	->#left.isOn()	S2.isOn()	f
#Constraint#EXPRESSION	->	(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_4,t
#Constraint#EXPRESSION	->#left==	ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1	t
#Constraint#EXPRESSION	->#right.isHidden()	Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden()	f
#Constraint#EXPRESSION	->	(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())	skip
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#B1,WARNING,f
#CanceledRequest#X1,NORMAL,f
#CanceledRequest#Y1,NORMAL,f
#Result#A,A,A1
#Result#A,B,
#Result#A,X,
#Result#A,Y,
#Constraint#START,HA1209_MaxOperator_1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_2,t
#Constraint#EXPRESSION	->#left==	ALL_AREAS.max{ x |x.contentValue()} == B	f
#Constraint#EXPRESSION	->	(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_3,t
#Constraint#EXPRESSION	->#left.isOn()	S2.isOn()	f
#Constraint#EXPRESSION	->	(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())	t
#Constraint#END
#Constraint#START,HA1209_MaxOperator_4,t
#Constraint#EXPRESSION	->#left==	ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1	t
#Constraint#EXPRESSION	->#right.isHidden()	Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden()	f
#Constraint#EXPRESSION	->	(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())	skip
#Constraint#END
----Request Information----
Allocatable Count:4
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
  Area[Y] policy[DEFAULT] visibility[10]
ContentState Count:5
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[1]
  ViewContent[B1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::WARNING] priority[11] isActive[false] order[0]
  ViewContent[X1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[Y1::NORMAL] priority[10] isActive[false] order[0]
Scene Count:2
  Scene[S1] isActive[false]
  Scene[S2] isActive[false]
Constraint Count:4
  Constraint[HA1209_MaxOperator_1] Expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] runtime[true]
  Constraint[HA1209_MaxOperator_2] Expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] runtime[true]
  Constraint[HA1209_MaxOperator_3] Expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] runtime[true]
  Constraint[HA1209_MaxOperator_4] Expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] runtime[true]
----Request Information----
Allocatable Count:4
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
  Area[Y] policy[DEFAULT] visibility[10]
ContentState Count:5
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[1]
  ViewContent[B1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::WARNING] priority[11] isActive[false] order[0]
  ViewContent[X1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[Y1::NORMAL] priority[10] isActive[false] order[0]
Scene Count:2
  Scene[S1] isActive[false]
  Scene[S2] isActive[true]
Constraint Count:4
  Constraint[HA1209_MaxOperator_1] Expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] runtime[true]
  Constraint[HA1209_MaxOperator_2] Expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] runtime[true]
  Constraint[HA1209_MaxOperator_3] Expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] runtime[true]
  Constraint[HA1209_MaxOperator_4] Expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] runtime[true]
----Request Information----
Allocatable Count:4
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
  Area[Y] policy[DEFAULT] visibility[10]
ContentState Count:5
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[1]
  ViewContent[B1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::WARNING] priority[11] isActive[false] order[0]
  ViewContent[X1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[Y1::NORMAL] priority[10] isActive[false] order[0]
Scene Count:2
  Scene[S1] isActive[false]
  Scene[S2] isActive[false]
Constraint Count:4
  Constraint[HA1209_MaxOperator_1] Expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] runtime[true]
  Constraint[HA1209_MaxOperator_2] Expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] runtime[true]
  Constraint[HA1209_MaxOperator_3] Expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] runtime[true]
  Constraint[HA1209_MaxOperator_4] Expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] runtime[true]
----Previous Result Information----
Allocatable TotalCount:4
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[Y] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[false] active[false]
  ViewContent[B1] visible[false] active[false]
  ViewContent[X1] visible[false] active[false]
  ViewContent[Y1] visible[false] active[false]
----Previous Result Information----
Allocatable TotalCount:4
  Area[A] Content[A1::NORMAL] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[Y] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[true] active[true]
    allocated Area[A]
  ViewContent[B1] visible[false] active[false]
  ViewContent[X1] visible[false] active[false]
  ViewContent[Y1] visible[false] active[false]
----Previous Result Information----
Allocatable TotalCount:4
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[Y] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[false] active[true]
  ViewContent[B1] visible[false] active[false]
  ViewContent[X1] visible[false] active[false]
  ViewContent[Y1] visible[false] active[false]
----Arbitrate----
Area[A] check start
  Content[A1::NORMAL] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [before arbitrate skip]
      Allocatable[X] has Content Priority [before arbitrate skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] check start
      Scene[S2] is not On
      [(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true
    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

Area[A] displays Content[A1::NORMAL] hidden[false]

Area[B] check start
  Content[B1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [before arbitrate skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

Area[B] displays Content[null] hidden[false]

Area[X] check start
  Content[X1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

Area[X] displays Content[null] hidden[false]

Area[Y] check start
  Content[Y1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [no Content skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] check start
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [no Content skip]
      Content[X1] state value [no Content skip]
      Content[Y1] state value [no Content skip]
      ALL_VIEWCONTENTS.max{ x |x.stateValue()} is A1
      [ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1] true
      Area[Y] has no Displayed Content
      Y.displayingContent().allocatables().max{ y |y.contentValue()} is NULL
      [NULL.isHidden()] false
      [(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip
    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip

Area[Y] displays Content[null] hidden[false]

----Arbitrate----
Area[A] check start
  Content[A1::NORMAL] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [before arbitrate skip]
      Allocatable[X] has Content Priority [before arbitrate skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] check start
      Scene[S2] is On
      Content[A1] state value [NORMAL : 10]
      {A1}.max{ x |x.stateValue()} is A1
      Content[A1::NORMAL] is Visible
      [!{A1}.max{ x |x.stateValue()}.isVisible()] false
      [(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] false
    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] false

  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [no Content skip]
      Allocatable[B] has Content Priority [before arbitrate skip]
      Allocatable[X] has Content Priority [before arbitrate skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is NULL
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] check start
      Scene[S2] is On
      Content[A1] state value [NORMAL : 10]
      {A1}.max{ x |x.stateValue()} is A1
      Content[A1] is not Visible
      [!{A1}.max{ x |x.stateValue()}.isVisible()] true
      [(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true
    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

Area[A] displays Content[null] hidden[false]

Area[B] check start
  Content[B1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [no Content skip]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [before arbitrate skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is NULL
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

Area[B] displays Content[null] hidden[false]

Area[X] check start
  Content[X1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [no Content skip]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is NULL
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [no Content skip]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is NULL
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

Area[X] displays Content[null] hidden[false]

Area[Y] check start
  Content[Y1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [no Content skip]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [no Content skip]
      ALL_AREAS.max{ x |x.contentValue()} is NULL
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] check start
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [no Content skip]
      Content[X1] state value [no Content skip]
      Content[Y1] state value [no Content skip]
      ALL_VIEWCONTENTS.max{ x |x.stateValue()} is A1
      [ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1] true
      Area[Y] has no Displayed Content
      Y.displayingContent().allocatables().max{ y |y.contentValue()} is NULL
      [NULL.isHidden()] false
      [(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip
    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip

Area[Y] displays Content[null] hidden[false]

----Arbitrate----
Area[A] check start
  Content[A1::NORMAL] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [before arbitrate skip]
      Allocatable[X] has Content Priority [before arbitrate skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] check start
      Scene[S2] is not On
      [(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true
    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

Area[A] displays Content[A1::NORMAL] hidden[false]

Area[B] check start
  Content[B1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [before arbitrate skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

Area[B] displays Content[null] hidden[false]

Area[X] check start
  Content[X1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [before arbitrate skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

Area[X] displays Content[null] hidden[false]

Area[Y] check start
  Content[Y1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [no Content skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] check start
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [no Content skip]
      Content[X1] state value [no Content skip]
      Content[Y1] state value [no Content skip]
      ALL_VIEWCONTENTS.max{ x |x.stateValue()} is A1
      [ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1] true
      Area[Y] has no Displayed Content
      Y.displayingContent().allocatables().max{ y |y.contentValue()} is NULL
      [NULL.isHidden()] false
      [(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip
    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip

Area[Y] displays Content[null] hidden[false]

----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is Visible skip
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Active skip
Content[B1::WARNING] check start
  Content[B1::WARNING] is not Active skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is not Active skip
Content[Y1::NORMAL] check start
  Content[Y1::NORMAL] is not Active skip
----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is not Canceled because NEVER_GIVEUP
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Active skip
Content[B1::WARNING] check start
  Content[B1::WARNING] is not Active skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is not Active skip
Content[Y1::NORMAL] check start
  Content[Y1::NORMAL] is not Active skip
----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is Visible skip
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Active skip
Content[B1::WARNING] check start
  Content[B1::WARNING] is not Active skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is not Active skip
Content[Y1::NORMAL] check start
  Content[Y1::NORMAL] is not Active skip
----Check All Constraint----
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [no Content skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] check start
      Scene[S2] is not On
      [(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true
    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true

    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] check start
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [no Content skip]
      Content[X1] state value [no Content skip]
      Content[Y1] state value [no Content skip]
      ALL_VIEWCONTENTS.max{ x |x.stateValue()} is A1
      [ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1] true
      Area[Y] has no Displayed Content
      Y.displayingContent().allocatables().max{ y |y.contentValue()} is NULL
      [NULL.isHidden()] false
      [(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip
    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip

----Check All Constraint----
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [no Content skip]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [no Content skip]
      ALL_AREAS.max{ x |x.contentValue()} is NULL
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] check start
      Scene[S2] is On
      Content[A1] state value [NORMAL : 10]
      {A1}.max{ x |x.stateValue()} is A1
      Content[A1] is not Visible
      [!{A1}.max{ x |x.stateValue()}.isVisible()] true
      [(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true
    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true

    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] check start
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [no Content skip]
      Content[X1] state value [no Content skip]
      Content[Y1] state value [no Content skip]
      ALL_VIEWCONTENTS.max{ x |x.stateValue()} is A1
      [ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1] true
      Area[Y] has no Displayed Content
      Y.displayingContent().allocatables().max{ y |y.contentValue()} is NULL
      [NULL.isHidden()] false
      [(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip
    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip

----Check All Constraint----
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true
    constraint expression[(S1.isOn() -> ALL_AREAS.max{ x |x.contentValue()}.isHidden())] true

    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] check start
      Allocatable[A] has Content Priority [A1::NORMAL : 10]
      Allocatable[B] has Content Priority [no Content skip]
      Allocatable[X] has Content Priority [no Content skip]
      Allocatable[Y] has Content Priority [no Content skip]
      ALL_AREAS.max{ x |x.contentValue()} is A
      [ALL_AREAS.max{ x |x.contentValue()} == B] false
      [(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true
    constraint expression[(ALL_AREAS.max{ x |x.contentValue()} == B -> X.isHidden())] true

    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] check start
      Scene[S2] is not On
      [(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true
    constraint expression[(S2.isOn() -> !{A1}.max{ x |x.stateValue()}.isVisible())] true

    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] check start
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [no Content skip]
      Content[X1] state value [no Content skip]
      Content[Y1] state value [no Content skip]
      ALL_VIEWCONTENTS.max{ x |x.stateValue()} is A1
      [ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1] true
      Area[Y] has no Displayed Content
      Y.displayingContent().allocatables().max{ y |y.contentValue()} is NULL
      [NULL.isHidden()] false
      [(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip
    constraint expression[(ALL_VIEWCONTENTS.max{ x |x.stateValue()} == A1 -> Y.displayingContent().allocatables().max{ y |y.contentValue()}.isHidden())] before arbitrate skip

----Result Information----
Allocatable TotalCount:4
  Area[A] Content[A1::NORMAL] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[Y] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[true] cancel[false]
    allocated Area[A]
  ViewContent[B1] visible[false] cancel[false]
  ViewContent[X1] visible[false] cancel[false]
  ViewContent[Y1] visible[false] cancel[false]
----Result Information----
Allocatable TotalCount:4
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[Y] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[false] cancel[false]
  ViewContent[B1] visible[false] cancel[false]
  ViewContent[X1] visible[false] cancel[false]
  ViewContent[Y1] visible[false] cancel[false]
----Result Information----
Allocatable TotalCount:4
  Area[A] Content[A1::NORMAL] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[Y] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[true] cancel[false]
    allocated Area[A]
  ViewContent[B1] visible[false] cancel[false]
  ViewContent[X1] visible[false] cancel[false]
  ViewContent[Y1] visible[false] cancel[false]

