#Request#C,off,A1,NORMAL,0
#Request#C,off,A2,NORMAL,0
#Request#C,off,B1,NORMAL,0
#Request#C,on,X1,NORMAL,1
#Request#S,off,S1
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	f
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	f
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_4,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	A2.hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(A2.hasBeenDisplayed() -> XX.isHidden())	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#A2,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#X1,NORMAL,f
#Result#A,A,
#Result#A,B,
#Result#A,X,X1
#Result#A,XX,X1
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	f
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_4,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	A2.hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(A2.hasBeenDisplayed() -> XX.isHidden())	t
#Constraint#END
----Request Information----
Allocatable Count:4
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
  Area[XX] policy[DEFAULT] visibility[10]
ContentState Count:4
  ViewContent[A1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[A2::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[X1::NORMAL] priority[10] isActive[true] order[1]
Scene Count:1
  Scene[S1] isActive[false]
Constraint Count:3
  Constraint[HA1207_HasBeenDisplayed_1] Expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_2] Expression[(A.isDisplayed() -> B.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_4] Expression[(A2.hasBeenDisplayed() -> XX.isHidden())] runtime[true]
----Previous Result Information----
Allocatable TotalCount:4
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[XX] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[false] active[false]
  ViewContent[A2] visible[false] active[false]
  ViewContent[B1] visible[false] active[false]
  ViewContent[X1] visible[false] active[false]
----Arbitrate----
Area[A] check start
  Content[A1] is not Active skip
  Content[A2] is not Active skip
  Content[null] check online constraints start
    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is not Displayed
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

  check online constraints to confirm area hidden state
Area[A] displays Content[null] hidden[false]

Area[B] check start
  Content[B1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has no Allocated Content
      Content[NULL].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is not Displayed
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

Area[B] displays Content[null] hidden[false]

Area[X] check start
  Content[X1::NORMAL] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has no Allocated Content
      Content[NULL].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

Area[X] displays Content[X1::NORMAL] hidden[false]

Area[XX] check start
  Content[X1::NORMAL] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] check start
      Content[A2].hasBeenDisplayed() false
      [(A2.hasBeenDisplayed() -> XX.isHidden())] true
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] true

Area[XX] displays Content[X1::NORMAL] hidden[false]

----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is not Active skip
Content[A2::NORMAL] check start
  Content[A2::NORMAL] is not Active skip
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Active skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is Visible skip
----Check All Constraint----
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has no Allocated Content
      Content[NULL].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is not Displayed
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] check start
      Content[A2].hasBeenDisplayed() false
      [(A2.hasBeenDisplayed() -> XX.isHidden())] true
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] true

----Result Information----
Allocatable TotalCount:4
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[X1::NORMAL] hidden[false]
  Area[XX] Content[X1::NORMAL] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[false] cancel[false]
  ViewContent[A2] visible[false] cancel[false]
  ViewContent[B1] visible[false] cancel[false]
  ViewContent[X1] visible[true] cancel[false]
    allocated Area[X]
    allocated Area[XX]

