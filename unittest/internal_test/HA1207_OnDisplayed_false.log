#Request#C,off,A1,NORMAL,0
#Request#C,off,B1,NORMAL,0
#Request#C,on,X1,NORMAL,1
#Request#S,off,S1
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	skip
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	skip
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_OnDisplayed1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> X.isHidden())	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#X1,NORMAL,f
#Result#A,A,,f
#Result#A,B,,f
#Result#A,X,X1,f
#Constraint#START,HA1207_OnDisplayed1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	t
#Constraint#END
#PrevResult#A,X,X1,NORMAL
#Request#C,off,A1,NORMAL,0
#Request#C,on,B1,NORMAL,2
#Request#C,on,X1,NORMAL,1
#Request#S,off,S1
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	skip
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	skip
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#X1,NORMAL,f
#Result#A,A,,t
#Result#A,B,B1,f
#Result#A,X,X1,f
#Constraint#START,HA1207_OnDisplayed1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	t
#Constraint#END
#PrevResult#A,B,B1,NORMAL
#PrevResult#A,X,X1,NORMAL
#Request#C,on,A1,NORMAL,3
#Request#C,on,B1,NORMAL,2
#Request#C,on,X1,NORMAL,1
#Request#S,off,S1
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	skip
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	skip
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#X1,NORMAL,f
#Result#A,A,,t
#Result#A,B,B1,f
#Result#A,X,X1,f
#Constraint#START,HA1207_OnDisplayed1,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_OnDisplayed2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	B.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	->	(B.isDisplayed() -> A.isHidden())	t
#Constraint#END
----All Constraints check result----
Total Result:true
online  constraint[HA1207_OnDisplayed1] result[true]
online  constraint[HA1207_OnDisplayed2] result[true]

----All Constraints check result----
Total Result:true
online  constraint[HA1207_OnDisplayed1] result[true]
online  constraint[HA1207_OnDisplayed2] result[true]

----All Constraints check result----
Total Result:true
online  constraint[HA1207_OnDisplayed1] result[true]
online  constraint[HA1207_OnDisplayed2] result[true]

----Request Information----
Allocatable Count:3
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
ContentState Count:3
  ViewContent[A1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[X1::NORMAL] priority[10] isActive[true] order[1]
Scene Count:1
  Scene[S1] isActive[false]
Constraint Count:2
  Constraint[HA1207_OnDisplayed1] Expression[(S1.isOn() -> X.isHidden())] runtime[true]
  Constraint[HA1207_OnDisplayed2] Expression[(B.isDisplayed() -> A.isHidden())] runtime[true]
PostConstraint Count:0
----Request Information----
Allocatable Count:3
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
ContentState Count:3
  ViewContent[A1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::NORMAL] priority[10] isActive[true] order[2]
  ViewContent[X1::NORMAL] priority[10] isActive[true] order[1]
Scene Count:1
  Scene[S1] isActive[false]
Constraint Count:2
  Constraint[HA1207_OnDisplayed1] Expression[(S1.isOn() -> X.isHidden())] runtime[true]
  Constraint[HA1207_OnDisplayed2] Expression[(B.isDisplayed() -> A.isHidden())] runtime[true]
PostConstraint Count:0
----Request Information----
Allocatable Count:3
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
ContentState Count:3
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[3]
  ViewContent[B1::NORMAL] priority[10] isActive[true] order[2]
  ViewContent[X1::NORMAL] priority[10] isActive[true] order[1]
Scene Count:1
  Scene[S1] isActive[false]
Constraint Count:2
  Constraint[HA1207_OnDisplayed1] Expression[(S1.isOn() -> X.isHidden())] runtime[true]
  Constraint[HA1207_OnDisplayed2] Expression[(B.isDisplayed() -> A.isHidden())] runtime[true]
PostConstraint Count:0
----Previous Result Information----
Allocatable TotalCount:3
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] active[false]
  ViewContent[B1] visible[false] active[false]
  ViewContent[X1] visible[false] active[false]
----Previous Result Information----
Allocatable TotalCount:3
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[X1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] active[false]
  ViewContent[B1] visible[false] active[false]
  ViewContent[X1] visible[true] active[true]
    allocated Area[X]
----Previous Result Information----
Allocatable TotalCount:3
  Area[A] Content[null] hidden[true]
  Area[B] Content[B1::NORMAL] hidden[false]
  Area[X] Content[X1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] active[false]
  ViewContent[B1] visible[true] active[true]
    allocated Area[B]
  ViewContent[X1] visible[true] active[true]
    allocated Area[X]
----Arbitrate----
Area[A] check start
  Content[A1] is not Active skip
  Content[null] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is before arbitrate skip
      [A.isHidden()] false
      [(B.isDisplayed() -> A.isHidden())] before arbitrate skip
    constraint expression[(B.isDisplayed() -> A.isHidden())] before arbitrate skip

Area[A] displays Content[null] hidden[false]

Area[B] check start
  Content[B1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is not Displayed
      [(B.isDisplayed() -> A.isHidden())] true
    constraint expression[(B.isDisplayed() -> A.isHidden())] true

  check online constraints to confirm area hidden state
Area[B] displays Content[null] hidden[false]

Area[X] check start
  Content[X1::NORMAL] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(S1.isOn() -> X.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> X.isHidden())] true
    constraint expression[(S1.isOn() -> X.isHidden())] true

Area[X] displays Content[X1::NORMAL] hidden[false]

----Arbitrate----
Area[A] check start
  Content[A1] is not Active skip
  Content[null] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is before arbitrate skip
      [A.isHidden()] false
      [(B.isDisplayed() -> A.isHidden())] before arbitrate skip
    constraint expression[(B.isDisplayed() -> A.isHidden())] before arbitrate skip

Area[A] displays Content[null] hidden[false]

Area[B] check start
  Content[B1::NORMAL] check online constraints start
    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is Displayed Content[B1::NORMAL]
      [A.isHidden()] false
      [(B.isDisplayed() -> A.isHidden())] false
    constraint expression[(B.isDisplayed() -> A.isHidden())] false

    Area[A] revisit allocatable check start
      Content[A1] is not Active skip
      Content[null] check online constraints start
      check online constraints to confirm area hidden state
        constraint expression[(B.isDisplayed() -> A.isHidden())] check start
          Area[B] is Displayed Content[B1::NORMAL]
          [A.isHidden()] false
          [(B.isDisplayed() -> A.isHidden())] false
        constraint expression[(B.isDisplayed() -> A.isHidden())] false

    Area[A] change hidden
    Area[A] displays Content[null] hidden[true]

    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is Displayed Content[B1::NORMAL]
      [A.isHidden()] true
      [(B.isDisplayed() -> A.isHidden())] true
    constraint expression[(B.isDisplayed() -> A.isHidden())] true

  check online constraints to confirm area hidden state
Area[B] displays Content[B1::NORMAL] hidden[false]

----Arbitrate----
Area[A] check start
  Content[A1::NORMAL] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is before arbitrate skip
      [A.isHidden()] false
      [(B.isDisplayed() -> A.isHidden())] before arbitrate skip
    constraint expression[(B.isDisplayed() -> A.isHidden())] before arbitrate skip

Area[A] displays Content[A1::NORMAL] hidden[false]

Area[B] check start
  Content[B1::NORMAL] check online constraints start
    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is Displayed Content[B1::NORMAL]
      [A.isHidden()] false
      [(B.isDisplayed() -> A.isHidden())] false
    constraint expression[(B.isDisplayed() -> A.isHidden())] false

    Area[A] revisit allocatable check start
      Content[A1::NORMAL] check online constraints start
      check online constraints to confirm area hidden state
        constraint expression[(B.isDisplayed() -> A.isHidden())] check start
          Area[B] is Displayed Content[B1::NORMAL]
          [A.isHidden()] false
          [(B.isDisplayed() -> A.isHidden())] false
        constraint expression[(B.isDisplayed() -> A.isHidden())] false

    Area[A] change hidden
    Area[A] displays Content[A1::NORMAL] hidden[true]

    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is Displayed Content[B1::NORMAL]
      [A.isHidden()] true
      [(B.isDisplayed() -> A.isHidden())] true
    constraint expression[(B.isDisplayed() -> A.isHidden())] true

  check online constraints to confirm area hidden state
Area[B] displays Content[B1::NORMAL] hidden[false]

----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is not Active skip
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Active skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is Visible skip
----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is not Active skip
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is Visible skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is Visible skip
----Cancel Request----
Content[A1::NORMAL] check start
  check wait of request
  check cancel of request
  Content[A1::NORMAL] is not Canceled because NEVER_GIVEUP
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is Visible skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is Visible skip
----Check All Constraint----
    constraint expression[(S1.isOn() -> X.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> X.isHidden())] true
    constraint expression[(S1.isOn() -> X.isHidden())] true

    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is not Displayed
      [(B.isDisplayed() -> A.isHidden())] true
    constraint expression[(B.isDisplayed() -> A.isHidden())] true

----Check All Constraint----
    constraint expression[(S1.isOn() -> X.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> X.isHidden())] true
    constraint expression[(S1.isOn() -> X.isHidden())] true

    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is Displayed Content[B1::NORMAL]
      [A.isHidden()] true
      [(B.isDisplayed() -> A.isHidden())] true
    constraint expression[(B.isDisplayed() -> A.isHidden())] true

----Check All Constraint----
    constraint expression[(S1.isOn() -> X.isHidden())] check start
      Scene[S1] is not On
      [(S1.isOn() -> X.isHidden())] true
    constraint expression[(S1.isOn() -> X.isHidden())] true

    constraint expression[(B.isDisplayed() -> A.isHidden())] check start
      Area[B] is Displayed Content[B1::NORMAL]
      [A.isHidden()] true
      [(B.isDisplayed() -> A.isHidden())] true
    constraint expression[(B.isDisplayed() -> A.isHidden())] true

----Run Rule----
----Run Rule----
----Run Rule----
----Result Information----
Allocatable TotalCount:3
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[X1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] cancel[false]
  ViewContent[B1] visible[false] cancel[false]
  ViewContent[X1] visible[true] cancel[false]
    allocated Area[X]
----Result Information----
Allocatable TotalCount:3
  Area[A] Content[null] hidden[true]
  Area[B] Content[B1::NORMAL] hidden[false]
  Area[X] Content[X1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] cancel[false]
  ViewContent[B1] visible[true] cancel[false]
    allocated Area[B]
  ViewContent[X1] visible[true] cancel[false]
    allocated Area[X]
----Result Information----
Allocatable TotalCount:3
  Area[A] Content[A1::NORMAL] hidden[true]
  Area[B] Content[B1::NORMAL] hidden[false]
  Area[X] Content[X1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] cancel[false]
    allocated Area[A]
  ViewContent[B1] visible[true] cancel[false]
    allocated Area[B]
  ViewContent[X1] visible[true] cancel[false]
    allocated Area[X]

