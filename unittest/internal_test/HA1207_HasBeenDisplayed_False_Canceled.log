#Request#C,off,A1,NORMAL,0
#Request#C,off,A2,NORMAL,0
#Request#C,on,B1,NORMAL,1
#Request#C,off,X1,NORMAL,0
#Request#S,off,S1
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	f
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	f
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_4,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	A2.hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(A2.hasBeenDisplayed() -> XX.isHidden())	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#A2,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#X1,NORMAL,f
#Constraint#START,HA1207_HasBeenDisplayed_3,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> B1.isCanceled())	t
#Constraint#END
#Result#A,A,,f
#Result#A,B,B1,f
#Result#A,X,,f
#Result#A,XX,,f
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	f
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_4,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	A2.hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(A2.hasBeenDisplayed() -> XX.isHidden())	t
#Constraint#END
#PrevResult#A,B,B1,NORMAL
#Request#C,on,A1,NORMAL,2
#Request#C,off,A2,NORMAL,0
#Request#C,on,B1,NORMAL,1
#Request#C,off,X1,NORMAL,0
#Request#S,off,S1
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	skip
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	X.isHidden()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	X.isHidden()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	X.isHidden()	t
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	X.isHidden()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_3,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> B1.isCanceled())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_3,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> B1.isCanceled())	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#A2,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#X1,NORMAL,f
#Constraint#START,HA1207_HasBeenDisplayed_3,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> B1.isCanceled())	t
#Constraint#END
#Result#A,A,A1,f
#Result#A,B,,t
#Result#A,X,,t
#Result#A,XX,,f
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	X.isHidden()	t
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_4,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	A2.hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(A2.hasBeenDisplayed() -> XX.isHidden())	t
#Constraint#END
#PrevResult#A,A,A1,NORMAL
#Request#C,on,A1,NORMAL,2
#Request#C,off,A2,NORMAL,0
#Request#C,on,B1,NORMAL,1
#Request#C,off,X1,NORMAL,0
#Request#S,on,S1
#Constraint#START,HA1207_HasBeenDisplayed_3,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	t
#Constraint#EXPRESSION	->#right.isCanceled()	B1.isCanceled()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> B1.isCanceled())	f
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_3,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	t
#Constraint#EXPRESSION	->#right.isCanceled()	B1.isCanceled()	t
#Constraint#EXPRESSION	->	(S1.isOn() -> B1.isCanceled())	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#A2,NORMAL,f
#CanceledRequest#B1,NORMAL,t
#CanceledRequest#X1,NORMAL,f
#Constraint#START,HA1207_HasBeenDisplayed_3,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	t
#Constraint#EXPRESSION	->#right.isCanceled()	B1.isCanceled()	t
#Constraint#EXPRESSION	->	(S1.isOn() -> B1.isCanceled())	t
#Constraint#END
#Result#A,A,A1,f
#Result#A,B,,t
#Result#A,X,,t
#Result#A,XX,,f
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	X.isHidden()	t
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_4,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	A2.hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(A2.hasBeenDisplayed() -> XX.isHidden())	t
#Constraint#END
#PrevResult#A,A,A1,NORMAL
#Request#C,on,A1,NORMAL,1
#Request#C,off,A2,NORMAL,0
#Request#C,off,B1,NORMAL,0
#Request#C,on,X1,NORMAL,2
#Request#S,on,S1
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	f
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_4,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	A2.hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(A2.hasBeenDisplayed() -> XX.isHidden())	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#A2,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#X1,NORMAL,f
#Constraint#START,HA1207_HasBeenDisplayed_3,t
#Constraint#EXPRESSION	->#left.isOn()	S1.isOn()	t
#Constraint#EXPRESSION	->#right.isCanceled()	B1.isCanceled()	f
#Constraint#EXPRESSION	->	(S1.isOn() -> B1.isCanceled())	f
#Constraint#END
#Result#A,A,A1,f
#Result#A,B,,t
#Result#A,X,X1,f
#Result#A,XX,X1,f
#Constraint#START,HA1207_HasBeenDisplayed_1,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	B.allocatedContent().hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_2,t
#Constraint#EXPRESSION	->#left.isDisplayed()	A.isDisplayed()	t
#Constraint#EXPRESSION	->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	->	(A.isDisplayed() -> B.isHidden())	t
#Constraint#END
#Constraint#START,HA1207_HasBeenDisplayed_4,t
#Constraint#EXPRESSION	->#left.hasBeenDisplayed()	A2.hasBeenDisplayed()	f
#Constraint#EXPRESSION	->	(A2.hasBeenDisplayed() -> XX.isHidden())	t
#Constraint#END
----All Constraints check result----
Total Result:true
online  constraint[HA1207_HasBeenDisplayed_1] result[true]
online  constraint[HA1207_HasBeenDisplayed_2] result[true]
online  constraint[HA1207_HasBeenDisplayed_4] result[true]
cancel  constraint[HA1207_HasBeenDisplayed_3] result[true]
----All Constraints check result----
Total Result:true
online  constraint[HA1207_HasBeenDisplayed_1] result[true]
online  constraint[HA1207_HasBeenDisplayed_2] result[true]
online  constraint[HA1207_HasBeenDisplayed_4] result[true]
cancel  constraint[HA1207_HasBeenDisplayed_3] result[true]
----All Constraints check result----
Total Result:true
online  constraint[HA1207_HasBeenDisplayed_1] result[true]
online  constraint[HA1207_HasBeenDisplayed_2] result[true]
online  constraint[HA1207_HasBeenDisplayed_4] result[true]
cancel  constraint[HA1207_HasBeenDisplayed_3] result[true]
----All Constraints check result----
Total Result:false
online  constraint[HA1207_HasBeenDisplayed_1] result[true]
online  constraint[HA1207_HasBeenDisplayed_2] result[true]
online  constraint[HA1207_HasBeenDisplayed_4] result[true]
cancel  constraint[HA1207_HasBeenDisplayed_3] result[false]
----Request Information----
Allocatable Count:4
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
  Area[XX] policy[DEFAULT] visibility[10]
ContentState Count:4
  ViewContent[A1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[A2::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::NORMAL] priority[10] isActive[true] order[1]
  ViewContent[X1::NORMAL] priority[10] isActive[false] order[0]
Scene Count:1
  Scene[S1] isActive[false]
Constraint Count:3
  Constraint[HA1207_HasBeenDisplayed_1] Expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_2] Expression[(A.isDisplayed() -> B.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_4] Expression[(A2.hasBeenDisplayed() -> XX.isHidden())] runtime[true]
PostConstraint Count:1
  PostConstraint[HA1207_HasBeenDisplayed_3] Expression[(S1.isOn() -> B1.isCanceled())]
----Request Information----
Allocatable Count:4
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
  Area[XX] policy[DEFAULT] visibility[10]
ContentState Count:4
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[2]
  ViewContent[A2::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::NORMAL] priority[10] isActive[true] order[1]
  ViewContent[X1::NORMAL] priority[10] isActive[false] order[0]
Scene Count:1
  Scene[S1] isActive[false]
Constraint Count:3
  Constraint[HA1207_HasBeenDisplayed_1] Expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_2] Expression[(A.isDisplayed() -> B.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_4] Expression[(A2.hasBeenDisplayed() -> XX.isHidden())] runtime[true]
PostConstraint Count:1
  PostConstraint[HA1207_HasBeenDisplayed_3] Expression[(S1.isOn() -> B1.isCanceled())]
----Request Information----
Allocatable Count:4
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
  Area[XX] policy[DEFAULT] visibility[10]
ContentState Count:4
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[2]
  ViewContent[A2::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::NORMAL] priority[10] isActive[true] order[1]
  ViewContent[X1::NORMAL] priority[10] isActive[false] order[0]
Scene Count:1
  Scene[S1] isActive[true]
Constraint Count:3
  Constraint[HA1207_HasBeenDisplayed_1] Expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_2] Expression[(A.isDisplayed() -> B.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_4] Expression[(A2.hasBeenDisplayed() -> XX.isHidden())] runtime[true]
PostConstraint Count:1
  PostConstraint[HA1207_HasBeenDisplayed_3] Expression[(S1.isOn() -> B1.isCanceled())]
----Request Information----
Allocatable Count:4
  Area[A] policy[DEFAULT] visibility[10]
  Area[B] policy[DEFAULT] visibility[10]
  Area[X] policy[DEFAULT] visibility[10]
  Area[XX] policy[DEFAULT] visibility[10]
ContentState Count:4
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[1]
  ViewContent[A2::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[X1::NORMAL] priority[10] isActive[true] order[2]
Scene Count:1
  Scene[S1] isActive[true]
Constraint Count:3
  Constraint[HA1207_HasBeenDisplayed_1] Expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_2] Expression[(A.isDisplayed() -> B.isHidden())] runtime[true]
  Constraint[HA1207_HasBeenDisplayed_4] Expression[(A2.hasBeenDisplayed() -> XX.isHidden())] runtime[true]
PostConstraint Count:1
  PostConstraint[HA1207_HasBeenDisplayed_3] Expression[(S1.isOn() -> B1.isCanceled())]
----Previous Result Information----
Allocatable TotalCount:4
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[XX] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[false] active[false]
  ViewContent[A2] visible[false] active[false]
  ViewContent[B1] visible[false] active[false]
  ViewContent[X1] visible[false] active[false]
----Previous Result Information----
Allocatable TotalCount:4
  Area[A] Content[null] hidden[false]
  Area[B] Content[B1::NORMAL] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[XX] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[false] active[false]
  ViewContent[A2] visible[false] active[false]
  ViewContent[B1] visible[true] active[true]
    allocated Area[B]
  ViewContent[X1] visible[false] active[false]
----Previous Result Information----
Allocatable TotalCount:4
  Area[A] Content[A1::NORMAL] hidden[false]
  Area[B] Content[B1::NORMAL] hidden[true]
  Area[X] Content[null] hidden[true]
  Area[XX] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[true] active[true]
    allocated Area[A]
  ViewContent[A2] visible[false] active[false]
  ViewContent[B1] visible[false] active[true]
    allocated Area[B]
  ViewContent[X1] visible[false] active[false]
----Previous Result Information----
Allocatable TotalCount:4
  Area[A] Content[A1::NORMAL] hidden[false]
  Area[B] Content[B1::NORMAL] hidden[true]
  Area[X] Content[null] hidden[true]
  Area[XX] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[true] active[true]
    allocated Area[A]
  ViewContent[A2] visible[false] active[false]
  ViewContent[B1] visible[false] active[false]
    allocated Area[B]
  ViewContent[X1] visible[false] active[false]
----Arbitrate----
Area[A] check start
  Content[A1] is not Active skip
  Content[A2] is not Active skip
  Content[null] check online constraints start
    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is not Displayed
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

  check online constraints to confirm area hidden state
Area[A] displays Content[null] hidden[false]

Area[B] check start
  Content[B1::NORMAL] check online constraints start
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has Allocated Content[B1]
      Content[B1].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is not Displayed
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

Area[B] displays Content[B1::NORMAL] hidden[false]

Area[X] check start
  Content[X1] is not Active skip
  Content[null] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has Allocated Content[B1]
      Content[B1].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

Area[X] displays Content[null] hidden[false]

Area[XX] check start
  Content[X1] is not Active skip
  Content[null] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] check start
      Content[A2].hasBeenDisplayed() false
      [(A2.hasBeenDisplayed() -> XX.isHidden())] true
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] true

Area[XX] displays Content[null] hidden[false]

    constraint expression[(S1.isOn() -> B1.isCanceled())] check start
      Scene[S1] is not On
      [(S1.isOn() -> B1.isCanceled())] true
    constraint expression[(S1.isOn() -> B1.isCanceled())] true

----Arbitrate----
Area[A] check start
  Content[A2] is not Active skip
  Content[A1::NORMAL] check online constraints start
    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is Displayed Content[A1::NORMAL]
      [B.isHidden()] before arbitrate skip
      [(A.isDisplayed() -> B.isHidden())] before arbitrate skip
    constraint expression[(A.isDisplayed() -> B.isHidden())] before arbitrate skip

  check online constraints to confirm area hidden state
Area[A] displays Content[A1::NORMAL] hidden[false]

Area[B] check start
  Content[B1::NORMAL] check online constraints start
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has Allocated Content[B1]
      Content[B1].hasBeenDisplayed() true
      [X.isHidden()] false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] false
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] false

    Area[X] revisit allocatable check start
      Content[X1] is not Active skip
      Content[null] check online constraints start
      check online constraints to confirm area hidden state
        constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
          Allocatable[B] has Allocated Content[B1]
          Content[B1].hasBeenDisplayed() true
          [X.isHidden()] false
          [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] false
        constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] false

    Area[X] change hidden
    Area[X] displays Content[null] hidden[true]

    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has Allocated Content[B1]
      Content[B1].hasBeenDisplayed() true
      [X.isHidden()] true
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is Displayed Content[A1::NORMAL]
      [B.isHidden()] false
      [(A.isDisplayed() -> B.isHidden())] false
    constraint expression[(A.isDisplayed() -> B.isHidden())] false

Area[B] change hidden
Area[B] displays Content[B1::NORMAL] hidden[true]

    Area[X] affect allocatable check start
      Content[X1] is not Active skip
      Content[null] check online constraints start
      check online constraints to confirm area hidden state
        constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
          Allocatable[B] has Allocated Content[B1]
          Content[B1].hasBeenDisplayed() true
          [X.isHidden()] false
          [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] false
        constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] false

    Area[X] change hidden
    Area[X] displays Content[null] hidden[true]

    constraint expression[(S1.isOn() -> B1.isCanceled())] check start
      Scene[S1] is not On
      [(S1.isOn() -> B1.isCanceled())] true
    constraint expression[(S1.isOn() -> B1.isCanceled())] true

----Arbitrate----
    constraint expression[(S1.isOn() -> B1.isCanceled())] check start
      Scene[S1] is On
      [B1.isCanceled()] true
      [(S1.isOn() -> B1.isCanceled())] true
    constraint expression[(S1.isOn() -> B1.isCanceled())] true

----Arbitrate----
Area[B] check start
  Content[B1] is not Active skip
  Content[null] check online constraints start
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has no Allocated Content
      Content[NULL].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

  check online constraints to confirm area hidden state
    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is Displayed Content[A1::NORMAL]
      [B.isHidden()] false
      [(A.isDisplayed() -> B.isHidden())] false
    constraint expression[(A.isDisplayed() -> B.isHidden())] false

Area[B] change hidden
Area[B] displays Content[null] hidden[true]

Area[X] check start
  Content[X1::NORMAL] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has no Allocated Content
      Content[NULL].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

Area[X] displays Content[X1::NORMAL] hidden[false]

Area[XX] check start
  Content[X1::NORMAL] check online constraints start
  check online constraints to confirm area hidden state
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] check start
      Content[A2].hasBeenDisplayed() false
      [(A2.hasBeenDisplayed() -> XX.isHidden())] true
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] true

Area[XX] displays Content[X1::NORMAL] hidden[false]

    constraint expression[(S1.isOn() -> B1.isCanceled())] check start
      Scene[S1] is On
      [B1.isCanceled()] false
      [(S1.isOn() -> B1.isCanceled())] false
    constraint expression[(S1.isOn() -> B1.isCanceled())] false

----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is not Active skip
Content[A2::NORMAL] check start
  Content[A2::NORMAL] is not Active skip
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is Visible skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is not Active skip
----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is Visible skip
Content[A2::NORMAL] check start
  Content[A2::NORMAL] is not Active skip
Content[B1::NORMAL] check start
  check wait of request
    constraint expression[(S1.isOn() -> B1.isCanceled())] check start
      Scene[S1] is not On
      [(S1.isOn() -> B1.isCanceled())] true
    constraint expression[(S1.isOn() -> B1.isCanceled())] true

  check cancel of request
    constraint expression[(S1.isOn() -> B1.isCanceled())] check start
      Scene[S1] is not On
      [(S1.isOn() -> B1.isCanceled())] true
    constraint expression[(S1.isOn() -> B1.isCanceled())] true

  Content[B1::NORMAL] is not Canceled because NEVER_GIVEUP
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is not Active skip
----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is Visible skip
Content[A2::NORMAL] check start
  Content[A2::NORMAL] is not Active skip
Content[B1::NORMAL] check start
  check wait of request
    constraint expression[(S1.isOn() -> B1.isCanceled())] check start
      Scene[S1] is On
      [B1.isCanceled()] false
      [(S1.isOn() -> B1.isCanceled())] false
    constraint expression[(S1.isOn() -> B1.isCanceled())] false

  check cancel of request
    constraint expression[(S1.isOn() -> B1.isCanceled())] check start
      Scene[S1] is On
      [B1.isCanceled()] true
      [(S1.isOn() -> B1.isCanceled())] true
    constraint expression[(S1.isOn() -> B1.isCanceled())] true

  Content[B1::NORMAL] is Canceled
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is not Active skip
----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is Visible skip
Content[A2::NORMAL] check start
  Content[A2::NORMAL] is not Active skip
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Active skip
Content[X1::NORMAL] check start
  Content[X1::NORMAL] is Visible skip
----Check All Constraint----
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has Allocated Content[B1]
      Content[B1].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is not Displayed
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] check start
      Content[A2].hasBeenDisplayed() false
      [(A2.hasBeenDisplayed() -> XX.isHidden())] true
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] true

----Check All Constraint----
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has Allocated Content[B1]
      Content[B1].hasBeenDisplayed() true
      [X.isHidden()] true
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is Displayed Content[A1::NORMAL]
      [B.isHidden()] true
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] check start
      Content[A2].hasBeenDisplayed() false
      [(A2.hasBeenDisplayed() -> XX.isHidden())] true
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] true

----Check All Constraint----
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has Allocated Content[B1]
      Content[B1].hasBeenDisplayed() true
      [X.isHidden()] true
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is Displayed Content[A1::NORMAL]
      [B.isHidden()] true
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] check start
      Content[A2].hasBeenDisplayed() false
      [(A2.hasBeenDisplayed() -> XX.isHidden())] true
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] true

----Check All Constraint----
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] check start
      Allocatable[B] has no Allocated Content
      Content[NULL].hasBeenDisplayed() false
      [(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true
    constraint expression[(B.allocatedContent().hasBeenDisplayed() -> X.isHidden())] true

    constraint expression[(A.isDisplayed() -> B.isHidden())] check start
      Area[A] is Displayed Content[A1::NORMAL]
      [B.isHidden()] true
      [(A.isDisplayed() -> B.isHidden())] true
    constraint expression[(A.isDisplayed() -> B.isHidden())] true

    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] check start
      Content[A2].hasBeenDisplayed() false
      [(A2.hasBeenDisplayed() -> XX.isHidden())] true
    constraint expression[(A2.hasBeenDisplayed() -> XX.isHidden())] true

----Run Rule----
----Run Rule----
----Run Rule----
----Run Rule----
----Result Information----
Allocatable TotalCount:4
  Area[A] Content[null] hidden[false]
  Area[B] Content[B1::NORMAL] hidden[false]
  Area[X] Content[null] hidden[false]
  Area[XX] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[false] cancel[false]
  ViewContent[A2] visible[false] cancel[false]
  ViewContent[B1] visible[true] cancel[false]
    allocated Area[B]
  ViewContent[X1] visible[false] cancel[false]
----Result Information----
Allocatable TotalCount:4
  Area[A] Content[A1::NORMAL] hidden[false]
  Area[B] Content[B1::NORMAL] hidden[true]
  Area[X] Content[null] hidden[true]
  Area[XX] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[true] cancel[false]
    allocated Area[A]
  ViewContent[A2] visible[false] cancel[false]
  ViewContent[B1] visible[false] cancel[false]
    allocated Area[B]
  ViewContent[X1] visible[false] cancel[false]
----Result Information----
Allocatable TotalCount:4
  Area[A] Content[A1::NORMAL] hidden[false]
  Area[B] Content[B1::NORMAL] hidden[true]
  Area[X] Content[null] hidden[true]
  Area[XX] Content[null] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[true] cancel[false]
    allocated Area[A]
  ViewContent[A2] visible[false] cancel[false]
  ViewContent[B1] visible[false] cancel[true]
    allocated Area[B]
  ViewContent[X1] visible[false] cancel[false]
----Result Information----
Allocatable TotalCount:4
  Area[A] Content[A1::NORMAL] hidden[false]
  Area[B] Content[null] hidden[true]
  Area[X] Content[X1::NORMAL] hidden[false]
  Area[XX] Content[X1::NORMAL] hidden[false]
Content TotalCount:4
  ViewContent[A1] visible[true] cancel[false]
    allocated Area[A]
  ViewContent[A2] visible[false] cancel[false]
  ViewContent[B1] visible[false] cancel[false]
  ViewContent[X1] visible[true] cancel[false]
    allocated Area[X]
    allocated Area[XX]

