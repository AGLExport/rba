#Request#C,off,A1,NORMAL,0
#Request#C,off,B1,NORMAL,0
#Request#C,on,C1,NORMAL,1
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#C1,NORMAL,f
#Result#A,A,
#Result#A,B,
#Result#A,C,C1
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#PrevResult#A,C,C1,NORMAL
#Request#C,on,A1,NORMAL,2
#Request#C,off,B1,NORMAL,0
#Request#C,on,C1,NORMAL,1
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	f
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	f
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	f
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	f
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	f
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	f
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	f
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	f
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#C1,NORMAL,f
#Result#A,A,
#Result#A,B,
#Result#A,C,C1
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = C1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(C1)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > C1.stateValue()) OR ((xContent.stateValue() = C1.stateValue()) AND xContent.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > yContent.stateValue()) OR ((C1.stateValue() = yContent.stateValue()) AND C1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#PrevResult#A,C,C1,NORMAL
#Request#C,on,A1,NORMAL,2
#Request#C,on,B1,NORMAL,3
#Request#C,on,C1,NORMAL,1
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#1For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > B1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = B1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(B1)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	f
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	f
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	f
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > B1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = B1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(B1)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	f
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > yContent.stateValue()) OR ((A1.stateValue() = yContent.stateValue()) AND A1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = yContent.stateValue())	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(yContent)	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent)))	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->#right.isHidden()	C.isHidden()	skip
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> C.isHidden())	skip
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> C.isHidden()))	skip
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > yContent.stateValue()) OR ((B1.stateValue() = yContent.stateValue()) AND B1.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(xContent.stateValue() > A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(xContent.stateValue() = A1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(A1)	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1)))	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((xContent.stateValue() > A1.stateValue()) OR ((xContent.stateValue() = A1.stateValue()) AND xContent.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(xContent.stateValue() > B1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(xContent.stateValue() = B1.stateValue())	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	xContent.hasComeEarlierThan(B1)	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1)))	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((xContent.stateValue() > B1.stateValue()) OR ((xContent.stateValue() = B1.stateValue()) AND xContent.hasComeEarlierThan(B1))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	f
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	f
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	f
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	f
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	f
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	f
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	f
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	f
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	t
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	skip
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	skip
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	skip
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	skip
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	skip
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	f
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	f
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	f
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	f
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	f
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	f
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	f
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	f
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	t
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	t
#Constraint#END
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	t
#Constraint#END
#CanceledRequest#A1,NORMAL,f
#CanceledRequest#B1,NORMAL,f
#CanceledRequest#C1,NORMAL,f
#Result#A,A,
#Result#A,B,
#Result#A,C,C1
#Constraint#START,新規メッセージエリア間の調停,t
#Constraint#EXPRESSION	For All#0For All#0->#left!#==	A == A	t
#Constraint#EXPRESSION	For All#0For All#0->#left!	!A == A	f
#Constraint#EXPRESSION	For All#0For All#0->	(!A == A -> (((A1.stateValue() > A1.stateValue()) OR ((A1.stateValue() = A1.stateValue()) AND A1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#1->#left!#==	A == B	f
#Constraint#EXPRESSION	For All#0For All#1->#left!	!A == B	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#0>	(A1.stateValue() > B1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#0=	(A1.stateValue() = B1.stateValue())	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR#1AND	((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#leftOR	((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#0For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#0For All#1->#right->	(((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#1->	(!A == B -> (((A1.stateValue() > B1.stateValue()) OR ((A1.stateValue() = B1.stateValue()) AND A1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All#2->#left!#==	A == C	f
#Constraint#EXPRESSION	For All#0For All#2->#left!	!A == C	t
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#0>	(A1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#0=	(A1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	A1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR#1AND	((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->#leftOR	((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#0For All#2->#right->	(((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#0For All#2->	(!A == C -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#0For All	For All 新規メッセージエリアG { y |(!A == y -> (((A1.stateValue() > C1.stateValue()) OR ((A1.stateValue() = C1.stateValue()) AND A1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#1For All#0->#left!#==	B == A	f
#Constraint#EXPRESSION	For All#1For All#0->#left!	!B == A	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#0>	(B1.stateValue() > A1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#0=	(B1.stateValue() = A1.stateValue())	t
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(A1)	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR#1AND	((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->#leftOR	((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1)))	f
#Constraint#EXPRESSION	For All#1For All#0->#right->	(((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#0->	(!B == A -> (((B1.stateValue() > A1.stateValue()) OR ((B1.stateValue() = A1.stateValue()) AND B1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#1->#left!#==	B == B	t
#Constraint#EXPRESSION	For All#1For All#1->#left!	!B == B	f
#Constraint#EXPRESSION	For All#1For All#1->	(!B == B -> (((B1.stateValue() > B1.stateValue()) OR ((B1.stateValue() = B1.stateValue()) AND B1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All#2->#left!#==	B == C	f
#Constraint#EXPRESSION	For All#1For All#2->#left!	!B == C	t
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#0>	(B1.stateValue() > C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#0=	(B1.stateValue() = C1.stateValue())	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND#1.hasComeEarlierThan	B1.hasComeEarlierThan(C1)	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR#1AND	((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->#leftOR	((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1)))	f
#Constraint#EXPRESSION	For All#1For All#2->#right->	(((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden())	t
#Constraint#EXPRESSION	For All#1For All#2->	(!B == C -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#1For All	For All 新規メッセージエリアG { y |(!B == y -> (((B1.stateValue() > C1.stateValue()) OR ((B1.stateValue() = C1.stateValue()) AND B1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All#2For All#0->#left!#==	C == A	f
#Constraint#EXPRESSION	For All#2For All#0->#left!	!C == A	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#0>	(C1.stateValue() > A1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#0=	(C1.stateValue() = A1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(A1)	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR#1AND	((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))	f
#Constraint#EXPRESSION	For All#2For All#0->#right->#leftOR	((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1)))	t
#Constraint#EXPRESSION	For All#2For All#0->#right->#right.isHidden()	A.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#0->#right->	(((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#0->	(!C == A -> (((C1.stateValue() > A1.stateValue()) OR ((C1.stateValue() = A1.stateValue()) AND C1.hasComeEarlierThan(A1))) -> A.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#1->#left!#==	C == B	f
#Constraint#EXPRESSION	For All#2For All#1->#left!	!C == B	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#0>	(C1.stateValue() > B1.stateValue())	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#0=	(C1.stateValue() = B1.stateValue())	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND#1.hasComeEarlierThan	C1.hasComeEarlierThan(B1)	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR#1AND	((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))	f
#Constraint#EXPRESSION	For All#2For All#1->#right->#leftOR	((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1)))	t
#Constraint#EXPRESSION	For All#2For All#1->#right->#right.isHidden()	B.isHidden()	t
#Constraint#EXPRESSION	For All#2For All#1->#right->	(((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden())	t
#Constraint#EXPRESSION	For All#2For All#1->	(!C == B -> (((C1.stateValue() > B1.stateValue()) OR ((C1.stateValue() = B1.stateValue()) AND C1.hasComeEarlierThan(B1))) -> B.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All#2->#left!#==	C == C	t
#Constraint#EXPRESSION	For All#2For All#2->#left!	!C == C	f
#Constraint#EXPRESSION	For All#2For All#2->	(!C == C -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> C.isHidden()))	t
#Constraint#EXPRESSION	For All#2For All	For All 新規メッセージエリアG { y |(!C == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}	t
#Constraint#EXPRESSION	For All	For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((C1.stateValue() > C1.stateValue()) OR ((C1.stateValue() = C1.stateValue()) AND C1.hasComeEarlierThan(C1))) -> y.isHidden()))}}	t
#Constraint#END
----Request Information----
Allocatable Count:3
  Area[A] policy[DEFAULT] visibility[2]
  Area[B] policy[DEFAULT] visibility[1]
  Area[C] policy[DEFAULT] visibility[0]
ContentState Count:3
  ViewContent[A1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[B1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[C1::NORMAL] priority[11] isActive[true] order[1]
Scene Count:0
Constraint Count:1
  Constraint[新規メッセージエリア間の調停] Expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] runtime[true]
----Request Information----
Allocatable Count:3
  Area[A] policy[DEFAULT] visibility[2]
  Area[B] policy[DEFAULT] visibility[1]
  Area[C] policy[DEFAULT] visibility[0]
ContentState Count:3
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[2]
  ViewContent[B1::NORMAL] priority[10] isActive[false] order[0]
  ViewContent[C1::NORMAL] priority[11] isActive[true] order[1]
Scene Count:0
Constraint Count:1
  Constraint[新規メッセージエリア間の調停] Expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] runtime[true]
----Request Information----
Allocatable Count:3
  Area[A] policy[DEFAULT] visibility[2]
  Area[B] policy[DEFAULT] visibility[1]
  Area[C] policy[DEFAULT] visibility[0]
ContentState Count:3
  ViewContent[A1::NORMAL] priority[10] isActive[true] order[2]
  ViewContent[B1::NORMAL] priority[10] isActive[true] order[3]
  ViewContent[C1::NORMAL] priority[11] isActive[true] order[1]
Scene Count:0
Constraint Count:1
  Constraint[新規メッセージエリア間の調停] Expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] runtime[true]
----Previous Result Information----
Allocatable TotalCount:3
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[C] Content[null] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] active[false]
  ViewContent[B1] visible[false] active[false]
  ViewContent[C1] visible[false] active[false]
----Previous Result Information----
Allocatable TotalCount:3
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[C] Content[C1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] active[false]
  ViewContent[B1] visible[false] active[false]
  ViewContent[C1] visible[true] active[true]
    allocated Area[C]
----Previous Result Information----
Allocatable TotalCount:3
  Area[A] Content[A1::NORMAL] hidden[true]
  Area[B] Content[null] hidden[false]
  Area[C] Content[C1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] active[true]
    allocated Area[A]
  ViewContent[B1] visible[false] active[false]
  ViewContent[C1] visible[true] active[true]
    allocated Area[C]
----Arbitrate----
Area[A] check start
  Content[A1] is not Active skip
  Content[null] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

Area[A] displays Content[null] hidden[false]

Area[B] check start
  Content[B1] is not Active skip
  Content[null] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

Area[B] displays Content[null] hidden[false]

Area[C] check start
  Content[C1::NORMAL] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

Area[C] displays Content[C1::NORMAL] hidden[false]

----Arbitrate----
Area[A] check start
  Content[A1::NORMAL] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

Area[A] displays Content[A1::NORMAL] hidden[false]

Area[B] check start
  Content[B1] is not Active skip
  Content[null] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

Area[B] displays Content[null] hidden[false]

Area[C] check start
  Content[C1::NORMAL] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[A1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[A1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] false
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] false
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false

    Area[A] revisit allocatable check start
      Content[A1::NORMAL] check online constraints start
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
          Allocatable[A] has Allocated Content[A1]
          let xContent = x.allocatedContent() = A1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[A1] state value [NORMAL : 10]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[A1] has come earlier than Content[NULL] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [B.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[A1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          Allocatable[B] has no Allocated Content
          let xContent = x.allocatedContent() = NULL
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[NULL] state value [no Content skip]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[NULL] state value [no Content skip]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[NULL] has come earlier than Content[A1] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [A.isHidden()] before arbitrate skip
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[NULL] state value [no Content skip]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[NULL] state value [no Content skip]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[NULL] has come earlier than Content[C1] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [C.isHidden()] before arbitrate skip
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let xContent = x.allocatedContent() = C1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[A1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [A.isHidden()] before arbitrate skip
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[C1] state value [NORMAL : 11]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[C1] has come earlier than Content[NULL] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [B.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

      check online constraints to confirm area hidden state
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
          Allocatable[A] has Allocated Content[A1]
          let xContent = x.allocatedContent() = A1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[A1] state value [NORMAL : 10]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[A1] has come earlier than Content[NULL] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [B.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[A1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          Allocatable[B] has no Allocated Content
          let xContent = x.allocatedContent() = NULL
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[NULL] state value [no Content skip]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[NULL] state value [no Content skip]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[NULL] has come earlier than Content[A1] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [A.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[NULL] state value [no Content skip]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[NULL] state value [no Content skip]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[NULL] has come earlier than Content[C1] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [C.isHidden()] before arbitrate skip
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let xContent = x.allocatedContent() = C1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[A1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [A.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] false
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[C1] state value [NORMAL : 11]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[C1] has come earlier than Content[NULL] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [B.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] false
          [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false

        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
          Allocatable[A] has Allocated Content[A1]
          let xContent = x.allocatedContent() = A1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[A1] state value [NORMAL : 10]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[A1] has come earlier than Content[NULL] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [B.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[A1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          Allocatable[B] has no Allocated Content
          let xContent = x.allocatedContent() = NULL
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[NULL] state value [no Content skip]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[NULL] state value [no Content skip]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[NULL] has come earlier than Content[A1] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [A.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[NULL] state value [no Content skip]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[NULL] state value [no Content skip]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[NULL] has come earlier than Content[C1] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [C.isHidden()] before arbitrate skip
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let xContent = x.allocatedContent() = C1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[A1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [A.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has no Allocated Content
          let yContent = y.allocatedContent() = NULL
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
          Content[C1] state value [NORMAL : 11]
          Content[NULL] state value [no Content skip]
          [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
          Content[C1] has come earlier than Content[NULL] is before arbitrate skip
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
          [B.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

    Area[A] change hidden
    Area[A] displays Content[A1::NORMAL] hidden[true]

    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[A1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[A1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[A1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[A1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

Area[C] displays Content[C1::NORMAL] hidden[false]

----Arbitrate----
Area[A] check start
  Content[A1::NORMAL] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

Area[A] displays Content[A1::NORMAL] hidden[false]

Area[B] check start
  Content[B1::NORMAL] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[A1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has Allocated Content[B1]
      let xContent = x.allocatedContent() = B1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[B1] has come earlier than Content[A1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[B1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[B1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[B1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[A1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] false
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] false
      Allocatable[B] has Allocated Content[B1]
      let xContent = x.allocatedContent() = B1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[B1] has come earlier than Content[A1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[B1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[B1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[B1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false

    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[A1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has Allocated Content[B1]
      let xContent = x.allocatedContent() = B1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[B1] has come earlier than Content[A1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[B1] state value [NORMAL : 10]
      Content[NULL] state value [before arbitrate skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[B1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] before arbitrate skip
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let xContent = x.allocatedContent() = before arbitrate skip
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [before arbitrate skip]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [before arbitrate skip]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[B1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] is before arbitrate skip
      let yContent = y.allocatedContent() = before arbitrate skip
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

Area[B] change hidden
Area[B] displays Content[B1::NORMAL] hidden[true]

Area[C] check start
  Content[C1::NORMAL] check online constraints start
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[A1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[A1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      Allocatable[B] has Allocated Content[B1]
      let xContent = x.allocatedContent() = B1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[B1] has come earlier than Content[A1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[B1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[A1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] false
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] false
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false

    Area[A] revisit allocatable check start
      Content[A1::NORMAL] check online constraints start
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
          Allocatable[A] has Allocated Content[A1]
          let xContent = x.allocatedContent() = A1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] true
          Content[A1] has come earlier than Content[B1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [B.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[A1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
          Allocatable[B] has Allocated Content[B1]
          let xContent = x.allocatedContent() = B1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[B1] state value [NORMAL : 10]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[B1] state value [NORMAL : 10]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] true
          Content[B1] has come earlier than Content[A1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[B1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[B1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[B1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
          Allocatable[C] has Allocated Content[C1]
          let xContent = x.allocatedContent() = C1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[A1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [A.isHidden()] before arbitrate skip
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[B1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [B.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
          [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

      check online constraints to confirm area hidden state
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
          Allocatable[A] has Allocated Content[A1]
          let xContent = x.allocatedContent() = A1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] true
          Content[A1] has come earlier than Content[B1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [B.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[A1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
          Allocatable[B] has Allocated Content[B1]
          let xContent = x.allocatedContent() = B1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[B1] state value [NORMAL : 10]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[B1] state value [NORMAL : 10]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] true
          Content[B1] has come earlier than Content[A1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[B1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[B1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[B1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
          Allocatable[C] has Allocated Content[C1]
          let xContent = x.allocatedContent() = C1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[A1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [A.isHidden()] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] false
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[B1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [B.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] false
          [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false

        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
          Allocatable[A] has Allocated Content[A1]
          let xContent = x.allocatedContent() = A1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] true
          Content[A1] has come earlier than Content[B1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [B.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[A1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[A1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
          Allocatable[B] has Allocated Content[B1]
          let xContent = x.allocatedContent() = B1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[B1] state value [NORMAL : 10]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[B1] state value [NORMAL : 10]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] true
          Content[B1] has come earlier than Content[A1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] false
          [!x == y] true
          Content[B1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() > yContent.stateValue())] false
          Content[B1] state value [NORMAL : 10]
          Content[C1] state value [NORMAL : 11]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[B1] has come earlier than Content[C1] false
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
          Allocatable[C] has Allocated Content[C1]
          let xContent = x.allocatedContent() = C1
          Allocatable[A] has Allocated Content[A1]
          let yContent = y.allocatedContent() = A1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[A1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[A1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [A.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[B] has Allocated Content[B1]
          let yContent = y.allocatedContent() = B1
          [x == y] false
          [!x == y] true
          Content[C1] state value [NORMAL : 11]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() > yContent.stateValue())] true
          Content[C1] state value [NORMAL : 11]
          Content[B1] state value [NORMAL : 10]
          [(xContent.stateValue() = yContent.stateValue())] false
          Content[C1] has come earlier than Content[B1] true
          [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
          [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
          [B.isHidden()] true
          [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          Allocatable[C] has Allocated Content[C1]
          let yContent = y.allocatedContent() = C1
          [x == y] true
          [!x == y] false
          [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
          [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
          [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true
        constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true

    Area[A] change hidden
    Area[A] displays Content[A1::NORMAL] hidden[true]

        Area[B] affect allocatable check start
          Content[B1::NORMAL] check online constraints start
            constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
              Allocatable[A] has Allocated Content[A1]
              let xContent = x.allocatedContent() = A1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] false
              [!x == y] true
              Content[A1] state value [NORMAL : 10]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[A1] state value [NORMAL : 10]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] true
              Content[A1] has come earlier than Content[B1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [B.isHidden()] before arbitrate skip
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] false
              [!x == y] true
              Content[A1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[A1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[A1] has come earlier than Content[C1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
              Allocatable[B] has Allocated Content[B1]
              let xContent = x.allocatedContent() = B1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] false
              [!x == y] true
              Content[B1] state value [NORMAL : 10]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[B1] state value [NORMAL : 10]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] true
              Content[B1] has come earlier than Content[A1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] false
              [!x == y] true
              Content[B1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[B1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[B1] has come earlier than Content[C1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
              Allocatable[C] has Allocated Content[C1]
              let xContent = x.allocatedContent() = C1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] false
              [!x == y] true
              Content[C1] state value [NORMAL : 11]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] true
              Content[C1] state value [NORMAL : 11]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[C1] has come earlier than Content[A1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [A.isHidden()] true
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] false
              [!x == y] true
              Content[C1] state value [NORMAL : 11]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] true
              Content[C1] state value [NORMAL : 11]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[C1] has come earlier than Content[B1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [B.isHidden()] before arbitrate skip
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
              [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
            constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

          check online constraints to confirm area hidden state
            constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
              Allocatable[A] has Allocated Content[A1]
              let xContent = x.allocatedContent() = A1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] false
              [!x == y] true
              Content[A1] state value [NORMAL : 10]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[A1] state value [NORMAL : 10]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] true
              Content[A1] has come earlier than Content[B1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [B.isHidden()] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] false
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] false
              [!x == y] true
              Content[A1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[A1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[A1] has come earlier than Content[C1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] false
              Allocatable[B] has Allocated Content[B1]
              let xContent = x.allocatedContent() = B1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] false
              [!x == y] true
              Content[B1] state value [NORMAL : 10]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[B1] state value [NORMAL : 10]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] true
              Content[B1] has come earlier than Content[A1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] false
              [!x == y] true
              Content[B1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[B1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[B1] has come earlier than Content[C1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
              Allocatable[C] has Allocated Content[C1]
              let xContent = x.allocatedContent() = C1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] false
              [!x == y] true
              Content[C1] state value [NORMAL : 11]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] true
              Content[C1] state value [NORMAL : 11]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[C1] has come earlier than Content[A1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [A.isHidden()] true
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] false
              [!x == y] true
              Content[C1] state value [NORMAL : 11]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] true
              Content[C1] state value [NORMAL : 11]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[C1] has come earlier than Content[B1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [B.isHidden()] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] false
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] false
              [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false
            constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] false

            constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
              Allocatable[A] has Allocated Content[A1]
              let xContent = x.allocatedContent() = A1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] false
              [!x == y] true
              Content[A1] state value [NORMAL : 10]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[A1] state value [NORMAL : 10]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] true
              Content[A1] has come earlier than Content[B1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [B.isHidden()] true
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] false
              [!x == y] true
              Content[A1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[A1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[A1] has come earlier than Content[C1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
              Allocatable[B] has Allocated Content[B1]
              let xContent = x.allocatedContent() = B1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] false
              [!x == y] true
              Content[B1] state value [NORMAL : 10]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[B1] state value [NORMAL : 10]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] true
              Content[B1] has come earlier than Content[A1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] false
              [!x == y] true
              Content[B1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() > yContent.stateValue())] false
              Content[B1] state value [NORMAL : 10]
              Content[C1] state value [NORMAL : 11]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[B1] has come earlier than Content[C1] false
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
              Allocatable[C] has Allocated Content[C1]
              let xContent = x.allocatedContent() = C1
              Allocatable[A] has Allocated Content[A1]
              let yContent = y.allocatedContent() = A1
              [x == y] false
              [!x == y] true
              Content[C1] state value [NORMAL : 11]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] true
              Content[C1] state value [NORMAL : 11]
              Content[A1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[C1] has come earlier than Content[A1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [A.isHidden()] true
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[B] has Allocated Content[B1]
              let yContent = y.allocatedContent() = B1
              [x == y] false
              [!x == y] true
              Content[C1] state value [NORMAL : 11]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() > yContent.stateValue())] true
              Content[C1] state value [NORMAL : 11]
              Content[B1] state value [NORMAL : 10]
              [(xContent.stateValue() = yContent.stateValue())] false
              Content[C1] has come earlier than Content[B1] true
              [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
              [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
              [B.isHidden()] true
              [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              Allocatable[C] has Allocated Content[C1]
              let yContent = y.allocatedContent() = C1
              [x == y] true
              [!x == y] false
              [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
              [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
              [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true
            constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true

        Area[B] change hidden
        Area[B] displays Content[B1::NORMAL] hidden[true]

    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[A1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[A1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      Allocatable[B] has Allocated Content[B1]
      let xContent = x.allocatedContent() = B1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[B1] has come earlier than Content[A1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[B1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[A1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true

  check online constraints to confirm area hidden state
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[A1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[A1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      Allocatable[B] has Allocated Content[B1]
      let xContent = x.allocatedContent() = B1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[B1] has come earlier than Content[A1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[B1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[A1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true

Area[C] displays Content[C1::NORMAL] hidden[false]

----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is not Active skip
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Active skip
Content[C1::NORMAL] check start
  Content[C1::NORMAL] is Visible skip
----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is not Canceled because NEVER_GIVEUP
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Active skip
Content[C1::NORMAL] check start
  Content[C1::NORMAL] is Visible skip
----Cancel Request----
Content[A1::NORMAL] check start
  Content[A1::NORMAL] is not Canceled because NEVER_GIVEUP
Content[B1::NORMAL] check start
  Content[B1::NORMAL] is not Canceled because NEVER_GIVEUP
Content[C1::NORMAL] check start
  Content[C1::NORMAL] is Visible skip
----Check All Constraint----
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

----Check All Constraint----
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[A1] state value [NORMAL : 10]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[A1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[A1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let xContent = x.allocatedContent() = NULL
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[A1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[NULL] state value [no Content skip]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[NULL] has come earlier than Content[C1] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [C.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[A1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has no Allocated Content
      let yContent = y.allocatedContent() = NULL
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() > yContent.stateValue())] before arbitrate skip
      Content[C1] state value [NORMAL : 11]
      Content[NULL] state value [no Content skip]
      [(xContent.stateValue() = yContent.stateValue())] before arbitrate skip
      Content[C1] has come earlier than Content[NULL] is before arbitrate skip
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] before arbitrate skip
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] before arbitrate skip
      [B.isHidden()] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] before arbitrate skip
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] before arbitrate skip
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] before arbitrate skip
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] before arbitrate skip

----Check All Constraint----
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] check start
      Allocatable[A] has Allocated Content[A1]
      let xContent = x.allocatedContent() = A1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[A1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] true
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[A1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[A1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      Allocatable[B] has Allocated Content[B1]
      let xContent = x.allocatedContent() = B1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] true
      Content[B1] has come earlier than Content[A1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] false
      [!x == y] true
      Content[B1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() > yContent.stateValue())] false
      Content[B1] state value [NORMAL : 10]
      Content[C1] state value [NORMAL : 11]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[B1] has come earlier than Content[C1] false
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] false
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      Allocatable[C] has Allocated Content[C1]
      let xContent = x.allocatedContent() = C1
      Allocatable[A] has Allocated Content[A1]
      let yContent = y.allocatedContent() = A1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[A1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[A1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [A.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[B] has Allocated Content[B1]
      let yContent = y.allocatedContent() = B1
      [x == y] false
      [!x == y] true
      Content[C1] state value [NORMAL : 11]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() > yContent.stateValue())] true
      Content[C1] state value [NORMAL : 11]
      Content[B1] state value [NORMAL : 10]
      [(xContent.stateValue() = yContent.stateValue())] false
      Content[C1] has come earlier than Content[B1] true
      [((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))] false
      [((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent)))] true
      [B.isHidden()] true
      [(((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden())] true
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      Allocatable[C] has Allocated Content[C1]
      let yContent = y.allocatedContent() = C1
      [x == y] true
      [!x == y] false
      [(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))] true
      [For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}] true
      [For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true
    constraint expression[For All 新規メッセージエリアG { x |For All 新規メッセージエリアG { y |(!x == y -> (((xContent.stateValue() > yContent.stateValue()) OR ((xContent.stateValue() = yContent.stateValue()) AND xContent.hasComeEarlierThan(yContent))) -> y.isHidden()))}}] true

----Result Information----
Allocatable TotalCount:3
  Area[A] Content[null] hidden[false]
  Area[B] Content[null] hidden[false]
  Area[C] Content[C1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] cancel[false]
  ViewContent[B1] visible[false] cancel[false]
  ViewContent[C1] visible[true] cancel[false]
    allocated Area[C]
----Result Information----
Allocatable TotalCount:3
  Area[A] Content[A1::NORMAL] hidden[true]
  Area[B] Content[null] hidden[false]
  Area[C] Content[C1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] cancel[false]
    allocated Area[A]
  ViewContent[B1] visible[false] cancel[false]
  ViewContent[C1] visible[true] cancel[false]
    allocated Area[C]
----Result Information----
Allocatable TotalCount:3
  Area[A] Content[A1::NORMAL] hidden[true]
  Area[B] Content[B1::NORMAL] hidden[true]
  Area[C] Content[C1::NORMAL] hidden[false]
Content TotalCount:3
  ViewContent[A1] visible[false] cancel[false]
    allocated Area[A]
  ViewContent[B1] visible[false] cancel[false]
    allocated Area[B]
  ViewContent[C1] visible[true] cancel[false]
    allocated Area[C]

