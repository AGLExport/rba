#HierarchyOfConstraint#START,HA1208_LetStatement_SameName1,t,Constraint
#HierarchyOfConstraint#EXPRESSION	->	(Exists {B, C} { x |x.allocatedContent() == letX} -> (Exists {D, E} { x |x.allocatedContent() == letX} -> F.isHidden()))	boolean
#HierarchyOfConstraint#EXPRESSION	->#leftExists	Exists {B, C} { x |x.allocatedContent() == letX}	boolean
#HierarchyOfConstraint#EXPRESSION	->#leftExists#0==	B.allocatedContent() == letX	boolean
#HierarchyOfConstraint#EXPRESSION	->#leftExists#1==	C.allocatedContent() == letX	boolean
#HierarchyOfConstraint#EXPRESSION	->#right->	(Exists {D, E} { x |x.allocatedContent() == letX} -> F.isHidden())	boolean
#HierarchyOfConstraint#EXPRESSION	->#right->#leftExists	Exists {D, E} { x |x.allocatedContent() == letX}	boolean
#HierarchyOfConstraint#EXPRESSION	->#right->#leftExists#0==	D.allocatedContent() == letX	boolean
#HierarchyOfConstraint#EXPRESSION	->#right->#leftExists#1==	E.allocatedContent() == letX	boolean
#HierarchyOfConstraint#EXPRESSION	->#right->#right.isHidden()	F.isHidden()	boolean
#HierarchyOfConstraint#END,HA1208_LetStatement_SameName1
#HierarchyOfConstraint#START,HA1208_LetStatement_SameName2,t,Constraint
#HierarchyOfConstraint#EXPRESSION	->	(letX.isVisible() -> !A.allocatedContent() == A2)	boolean
#HierarchyOfConstraint#EXPRESSION	->#left.isVisible()	letX.isVisible()	boolean
#HierarchyOfConstraint#EXPRESSION	->#right!	!A.allocatedContent() == A2	boolean
#HierarchyOfConstraint#EXPRESSION	->#right!#==	A.allocatedContent() == A2	boolean
#HierarchyOfConstraint#END,HA1208_LetStatement_SameName2
